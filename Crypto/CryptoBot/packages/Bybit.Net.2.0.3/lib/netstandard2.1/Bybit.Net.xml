<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bybit.Net</name>
    </assembly>
    <members>
        <member name="T:Bybit.Net.BybitHelpers">
            <summary>
            Helpers
            </summary>
        </member>
        <member name="M:Bybit.Net.BybitHelpers.AddBybit(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Bybit.Net.Objects.BybitClientOptions,Bybit.Net.Objects.BybitSocketClientOptions},System.Nullable{Microsoft.Extensions.DependencyInjection.ServiceLifetime})">
            <summary>
            Add the IBybitClient and IBybitSocketClient to the sevice collection so they can be injected
            </summary>
            <param name="services">The service collection</param>
            <param name="defaultOptionsCallback">Set default options for the client</param>
            <param name="socketClientLifeTime">The lifetime of the IBybitSocketClient for the service collection. Defaults to Scoped.</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Clients.BybitClient">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.IBybitClient" />
        </member>
        <member name="P:Bybit.Net.Clients.BybitClient.GeneralApi">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitClient.SpotApiV1">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitClient.SpotApiV3">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitClient.InversePerpetualApi">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitClient.InverseFuturesApi">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitClient.UsdPerpetualApi">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitClient.CopyTradingApi">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitClient.DerivativesApi">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitClient.V5Api">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.BybitClient.#ctor">
            <summary>
            Create a new instance of the BybitClient using the default options
            </summary>
        </member>
        <member name="M:Bybit.Net.Clients.BybitClient.#ctor(Bybit.Net.Objects.BybitClientOptions)">
            <summary>
            Create a new instance of the BybitClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:Bybit.Net.Clients.BybitClient.SetDefaultOptions(Bybit.Net.Objects.BybitClientOptions)">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Bybit.Net.Clients.BybitClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.BybitSocketClient">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.IBybitSocketClient" />
        </member>
        <member name="P:Bybit.Net.Clients.BybitSocketClient.UsdPerpetualStreams">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitSocketClient.InversePerpetualStreams">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitSocketClient.SpotStreamsV1">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitSocketClient.SpotStreamsV2">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitSocketClient.SpotStreamsV3">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitSocketClient.CopyTrading">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitSocketClient.DerivativesPublic">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitSocketClient.UnifiedMarginPrivate">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitSocketClient.ContractPrivate">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitSocketClient.V5SpotStreams">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitSocketClient.V5LinearStreams">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitSocketClient.V5OptionsStreams">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.BybitSocketClient.V5PrivateStreams">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.BybitSocketClient.#ctor">
            <summary>
            Create a new instance of BybitSocketClientFutures using the default options
            </summary>
        </member>
        <member name="M:Bybit.Net.Clients.BybitSocketClient.#ctor(Bybit.Net.Objects.BybitSocketClientOptions)">
            <summary>
            Create a new instance of BybitSocketClient using provided options
            </summary>
            <param name="options">The options to use for this client</param>
        </member>
        <member name="M:Bybit.Net.Clients.BybitSocketClient.SetDefaultOptions(Bybit.Net.Objects.BybitSocketClientOptions)">
            <summary>
            Set the default options to be used when creating new clients
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Bybit.Net.Clients.BybitSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApi">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApi" />
        </member>
        <member name="P:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApi.Account">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApi.GetUrl(System.String)">
            <summary>
            Get url for an endpoint
            </summary>
            <param name="endpoint"></param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiAccount">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiAccount.TransferAsync(System.String,System.String,System.Decimal,Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiTrading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiTrading.GetPositionsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiTrading.ClosePositionAsync(System.String,Bybit.Net.Enums.PositionMode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiTrading.SetLeverageAsync(System.String,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiTrading.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiTrading.GetOrdersAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiTrading.CancelOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.CopyTradingApi.BybitClientCopyTradingApiTrading.CloseOrderAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientCopyTradingStreams">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientCopyTradingStreams" />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientCopyTradingStreams.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientCopyTradingStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.CopyTrading.BybitCopyTradingPositionUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientCopyTradingStreams.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.CopyTrading.BybitCopyTradingUserTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientCopyTradingStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.CopyTrading.BybitCopyTradingOrderUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientCopyTradingStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.CopyTrading.BybitCopyTradingBalanceUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientCopyTradingStreams.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientCopyTradingStreams.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientCopyTradingStreams.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientCopyTradingStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientCopyTradingStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientCopyTradingStreams.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApi">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApi" />
        </member>
        <member name="P:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApi.Account">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApi.GetUrl(System.String)">
            <summary>
            Get url for an endpoint
            </summary>
            <param name="endpoint"></param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApi.TryParseErrorAsync(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.GetRiskLimitAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.SetRiskLimitAsync(System.String,System.Int64,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.GetPositionAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.GetPositionsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.ChangeMarginAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.SetLeverageAsync(System.String,System.Decimal,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.GetProfitAndLossHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.SetFullPartialPositionModeAsync(System.String,Bybit.Net.Enums.StopLossTakeProfitMode,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.SetIsolatedPositionModeAsync(System.String,System.Boolean,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.GetBalancesAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.GetLastUserFundingFeeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.GetPredictedUserFundingFeeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.GetWalletFundHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WalletFundType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WithdrawStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.GetAssetExchangeHistoryAsync(System.Nullable{System.Int64},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiAccount.GetApiKeyInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetLastFundingRateAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetMarkPriceKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetIndexPriceKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetPremiumIndexKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetAnnouncementsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetTickersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetOpenInterestAsync(System.String,Bybit.Net.Enums.DataPeriod,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetRecentBigTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiExchangeData.GetLongShortRatioAsync(System.String,Bybit.Net.Enums.DataPeriod,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.GetOrdersAsync(System.String,System.Nullable{Bybit.Net.Enums.OrderStatus},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.CancelOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.CancelAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.ModifyOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.GetOpenOrderRealTimeAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.GetOpenOrdersRealTimeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.PlaceConditionalOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,Bybit.Net.Enums.PositionMode,System.Decimal,System.Decimal,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.GetConditionalOrdersAsync(System.String,System.Nullable{Bybit.Net.Enums.StopOrderStatus},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.CancelConditionalOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.CancelAllConditionalOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.ModifyConditionalOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.GetOpenConditionalOrderRealTimeAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.GetOpenConditionalOrdersRealTimeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.GetUserTradesAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitClientInversePerpetualApiTrading.SetTradingStopAsync(System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams" />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToTradesUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToTickersUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToOrderBooksUpdatesAsync(System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToInsurancesUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitInsuranceUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToInsuranceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitInsuranceUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToInsuranceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitInsuranceUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToKlinesUpdatesAsync(Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToLiquidationsUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToLiquidationUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToLiquidationUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitPositionUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitInverseOrderUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToStopOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitStopOrderUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitBalanceUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InversePerpetualApi.BybitSocketClientInversePerpetualStreams.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApi">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApi" />
        </member>
        <member name="P:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApi.ContractApi">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApi.UnifiedMarginApi">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApi.GetUrl(System.String)">
            <summary>
            Get url for an endpoint
            </summary>
            <param name="endpoint"></param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApiExchangeData.GetFundingRateAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApiExchangeData.GetKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApiExchangeData.GetIndexPriceKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApiExchangeData.GetMarkPriceKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApiExchangeData.GetOpenInterestAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.OpenInterestInterval,Bybit.Net.Enums.DataPeriod,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApiExchangeData.GetOptionDeliveryPriceAsync(System.Nullable{Bybit.Net.Enums.Category},System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />/
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApiExchangeData.GetOrderBookAsync(System.String,System.Nullable{Bybit.Net.Enums.Category},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApiExchangeData.GetRiskLimitAsync(Bybit.Net.Enums.Category,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApiExchangeData.GetSymbolsAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApiExchangeData.GetTickerAsync(Bybit.Net.Enums.Category,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApiExchangeData.GetTradeHistoryAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{Bybit.Net.Enums.OptionType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitSocketClientDerivativesPublicStreams" />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.SubscribeToOrderBookUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.String,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.BybitDerivativesOrderBookEntry}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.BybitDerivativesOrderBookEntry}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.SubscribeToOrderBooksUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.BybitDerivativesOrderBookEntry}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.BybitDerivativesOrderBookEntry}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.SubscribeToTradeUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.SubscribeToTradesUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.SubscribeToTickerUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.BybitDerivativesTicker}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.SubscribeToTickersUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.BybitDerivativesTicker}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.SubscribeToKlineUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.SubscribeToKlinesUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.Collections.Generic.IEnumerable{System.String},Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.BybitSocketClientDerivativesPublicStreams.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientContractApi">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApi" />
        </member>
        <member name="P:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientContractApi.Account">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientContractApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientContractApi.#ctor(Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApi)">
            <summary>
            Constructor
            </summary>
            <param name="baseClient"> Client </param>
        </member>
        <member name="T:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount.GetBalancesAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount.GetPositionAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.SettleDataFilter},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount.GetProfitAndLossHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount.GetTradingFeeRate(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount.GetUserTradesAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount.GetWalletFundRecords(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WalletFundType},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount.SetAutoAddMarginAsync(System.String,Bybit.Net.Enums.OrderSide,System.Boolean,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount.SetFullPartialPositionModeAsync(System.String,Bybit.Net.Enums.StopLossTakeProfitMode,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount.SetLeverageAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount.SetMarginMode(Bybit.Net.Enums.MarginMode,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount.SetPositionModeAsync(Bybit.Net.Enums.PositionMode,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount.SetRiskLimitAsync(System.String,System.Int64,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientUnifiedMarginApiAccount.SetTradeModeAsync(System.String,Bybit.Net.Enums.TradeMode,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientContractApiTrading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientContractApiTrading.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientContractApiTrading.ReplaceOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientContractApiTrading.CancelOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientContractApiTrading.CancelAllOrdersAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientContractApiTrading.GetOrdersAsync(System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderStatus},System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientContractApiTrading.GetOpenOrdersRealTimeAsync(System.String,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitClientContractApiTrading.SetTradingStop(System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitSocketClientContractStreams">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitSocketClientContractStreams" />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitSocketClientContractStreams.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitSocketClientContractStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractPositionUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitSocketClientContractStreams.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractUserTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitSocketClientContractStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractOrderUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitSocketClientContractStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractBalanceUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitSocketClientContractStreams.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitSocketClientContractStreams.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitSocketClientContractStreams.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitSocketClientContractStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitSocketClientContractStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.ContractApi.BybitSocketClientContractStreams.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApi">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApi" />
        </member>
        <member name="P:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApi.Account">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApi.#ctor(Bybit.Net.Clients.DerivativesApi.BybitClientDerivativesApi)">
            <summary>
            Constructor
            </summary>
            <param name="baseClient"> Client </param>
        </member>
        <member name="T:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount.IsUMAEnabled">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount.GetWalletBalance(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount.ExchangeCoinsAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount.GetBorrowHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount.GetBorrowRateAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount.GetPositionAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount.GetTransactionLogAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount.SetFullPartialPositionModeAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.StopLossTakeProfitMode,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount.SetLeverageAsync(Bybit.Net.Enums.Category,System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount.SetRiskLimitAsync(Bybit.Net.Enums.Category,System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount.SetSlTpAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount.TransferFundsAsync(System.String,System.Decimal,System.String,Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiAccount.GetProfitAndLossHistoryAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiTrading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiTrading.PlaceOrderAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiTrading.ReplaceOrderAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiTrading.CancelOrderAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiTrading.CancelAllOrdersAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiTrading.GetOrdersAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderStatus},System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitClientUnifiedMarginApiTrading.GetOpenOrdersRealTimeAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitSocketClientUnifiedMarginStreams">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitSocketClientUnifiedMarginStreams" />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitSocketClientUnifiedMarginStreams.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitSocketClientUnifiedMarginStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.UnifiedMargin.BybitUnifiedMarginPositionUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitSocketClientUnifiedMarginStreams.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitSocketClientUnifiedMarginStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.UnifiedMargin.BybitUnifiedMarginOrderUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitSocketClientUnifiedMarginStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.UnifiedMargin.BybitUnifiedMarginBalance}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitSocketClientUnifiedMarginStreams.SubscribeToGreeksUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitGreeksUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitSocketClientUnifiedMarginStreams.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitSocketClientUnifiedMarginStreams.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitSocketClientUnifiedMarginStreams.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitSocketClientUnifiedMarginStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitSocketClientUnifiedMarginStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.DerivativesApi.UnifiedMarginApi.BybitSocketClientUnifiedMarginStreams.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApi">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApi" />
        </member>
        <member name="P:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApi.Transfer">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApi.WithdrawDeposit">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApi.GetUrl(System.String)">
            <summary>
            Get url for an endpoint
            </summary>
            <param name="endpoint"></param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiTransfer">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiTransfer.CreateInternalTransferAsync(System.String,System.String,System.Decimal,Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiTransfer.CreateSubAccountTransferAsync(System.String,System.String,System.Decimal,System.String,Bybit.Net.Enums.TransferType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiTransfer.GetTransferHistoryAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.TransferStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiTransfer.GetSubAccountTransferHistoryAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.TransferStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiTransfer.GetSubAccountsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiTransfer.EnableSubaccountsUniversalTransferAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiTransfer.UniversalTransferAsync(System.String,System.String,System.Decimal,System.String,System.String,Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiTransfer.GetUniversalTransferHistoryAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.TransferStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiTransfer.GetAssetBalanceAsync(Bybit.Net.Enums.AccountType,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiWithdrawDeposit">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiWithdrawDeposit.GetSupportedDepositMethodsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiWithdrawDeposit.GetDepositHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiWithdrawDeposit.GetWithdrawalHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiWithdrawDeposit.GetAssetInfoAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiWithdrawDeposit.GetAccountInfoAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiWithdrawDeposit.WithdrawAsync(System.String,System.String,System.String,System.Decimal,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiWithdrawDeposit.CancelWithdrawalAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.GeneralApi.BybitClientGeneralApiWithdrawDeposit.GetDepositAddressesAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApi">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApi" />
        </member>
        <member name="P:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApi.Account">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApi.GetUrl(System.String)">
            <summary>
            Get url for an endpoint
            </summary>
            <param name="endpoint"></param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApi.TryParseErrorAsync(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.GetRiskLimitAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.SetRiskLimitAsync(System.String,System.Int64,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.GetPositionAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.GetPositionsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.ChangeMarginAsync(System.String,Bybit.Net.Enums.PositionMode,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.SetLeverageAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.GetProfitAndLossHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.SetFullPartialPositionModeAsync(System.String,Bybit.Net.Enums.StopLossTakeProfitMode,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.SetPositionModeAsync(System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.SetIsolatedPositionModeAsync(System.String,System.Boolean,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.GetBalancesAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.GetWalletFundHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WalletFundType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WithdrawStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.GetAssetExchangeHistoryAsync(System.Nullable{System.Int64},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiAccount.GetApiKeyInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiExchangeData.GetKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiExchangeData.GetMarkPriceKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiExchangeData.GetIndexPriceKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiExchangeData.GetAnnouncementsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiExchangeData.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiExchangeData.GetOpenInterestAsync(System.String,Bybit.Net.Enums.DataPeriod,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiExchangeData.GetRecentBigTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiExchangeData.GetLongShortRatioAsync(System.String,Bybit.Net.Enums.DataPeriod,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,Bybit.Net.Enums.PositionMode,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.GetOrdersAsync(System.String,System.Nullable{Bybit.Net.Enums.OrderStatus},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.CancelOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.CancelAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.ModifyOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.GetOpenOrderRealTimeAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.GetOpenOrdersRealTimeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.PlaceConditionalOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,Bybit.Net.Enums.PositionMode,System.Decimal,System.Decimal,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.GetConditionalOrdersAsync(System.String,System.Nullable{Bybit.Net.Enums.StopOrderStatus},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.CancelConditionalOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.CancelAllConditionalOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.ModifyConditionalOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.GetOpenConditionalOrderRealTimeAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.GetOpenConditionalOrdersRealTimeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.GetUserTradesAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.InverseFuturesApi.BybitClientInverseFuturesApiTrading.SetTradingStopAsync(System.String,Bybit.Net.Enums.PositionMode,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.SpotApi.BybitBaseSocketClientSpotStreams">
            <summary>
            Base client for Bybit spot socket streams clients
            </summary>
        </member>
        <member name="F:Bybit.Net.Clients.SpotApi.BybitBaseSocketClientSpotStreams._options">
            <summary>
            Options
            </summary>
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitBaseSocketClientSpotStreams.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitBaseSocketClientSpotStreams.CheckAuth(Newtonsoft.Json.Linq.JToken,System.Boolean@)">
            <summary>
            Check auth data for valid
            </summary>
            <param name="data"> Response data </param>
            <param name="isSuccess"> Flag if auth is succeeded </param>
            <returns> Flag if response is valid </returns>
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitBaseSocketClientSpotStreams.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitBaseSocketClientSpotStreams.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitBaseSocketClientSpotStreams.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitBaseSocketClientSpotStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitBaseSocketClientSpotStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitBaseSocketClientSpotStreams.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi">
            <summary>
            Base client for the Bybit rest spot API
            </summary>
        </member>
        <member name="E:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.OnOrderPlaced">
            <inheritdoc />
        </member>
        <member name="E:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.OnOrderCanceled">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.PlaceOrderAsync(System.String,CryptoExchange.Net.CommonObjects.CommonOrderSide,CryptoExchange.Net.CommonObjects.CommonOrderType,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.CancelOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.ExchangeName">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetUrl(System.String)">
            <summary>
            Get url for an endpoint
            </summary>
            <param name="endpoint"></param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.TryParseErrorAsync(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetSymbolName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetTickersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetKlinesAsync(System.String,System.TimeSpan,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetRecentTradesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetBalancesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetOrderTradesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetClosedOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.TimeSpanToInterval(System.TimeSpan)">
            <summary>
            Timespan to kline interval
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.SpotApi.BybitClientBaseSpotApi.CommonSpotClient">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiAccountV1">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiAccountV1.GetBalancesAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiAccountV1.GetMarginAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1.GetMergedOrderBookAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1.GetKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1.GetTickersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1.GetPricesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1.GetBookPricesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiExchangeDataV1.GetBorrowInterestAndQuotaAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiTradingV1">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiTradingV1.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TimeInForce},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiTradingV1.GetOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiTradingV1.GetOpenOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiTradingV1.GetOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiTradingV1.CancelOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiTradingV1.CancelMultipleOrderAsync(System.String,System.Nullable{Bybit.Net.Enums.OrderSide},System.Collections.Generic.IEnumerable{Bybit.Net.Enums.OrderType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiTradingV1.GetUserTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiTradingV1.PlaceBorrowOrderAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiTradingV1.PlaceRepayOrderAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiTradingV1.GetBorrowRecordsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{Bybit.Net.Enums.BorrowStatus},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiTradingV1.GetRepayRecordsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiV1" />
        </member>
        <member name="P:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.Account">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.Trading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.GetTickersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.GetKlinesAsync(System.String,System.TimeSpan,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.GetRecentTradesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.PlaceOrderAsync(System.String,CryptoExchange.Net.CommonObjects.CommonOrderSide,CryptoExchange.Net.CommonObjects.CommonOrderType,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.GetOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.GetOrderTradesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.GetClosedOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.CancelOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.GetBalancesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitClientSpotApiV1.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.SpotApi.v1.BybitSocketClientSpotStreamsV1">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitSocketClientSpotStreamsV1"/>
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitSocketClientSpotStreamsV1.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTradeUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitSocketClientSpotStreamsV1.SubscribeToOrderBookUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitSocketClientSpotStreamsV1.SubscribeToKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitSocketClientSpotStreamsV1.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitSocketClientSpotStreamsV1.SubscribeToOrderBookMergedUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitSocketClientSpotStreamsV1.SubscribeToOrderBookDiffUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitSocketClientSpotStreamsV1.SubscribeToLeverageTokenUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotLeverageUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v1.BybitSocketClientSpotStreamsV1.CheckAuth(Newtonsoft.Json.Linq.JToken,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.SpotApi.v2.BybitSocketClientSpotStreamsV2">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.SpotApi.v2.IBybitSocketClientSpotStreamsV2"/>
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v2.BybitSocketClientSpotStreamsV2.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTradeUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v2.BybitSocketClientSpotStreamsV2.SubscribeToOrderBookUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v2.BybitSocketClientSpotStreamsV2.SubscribeToKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v2.BybitSocketClientSpotStreamsV2.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Spot.v1.BybitSpotBookPriceV1}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v2.BybitSocketClientSpotStreamsV2.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v2.BybitSocketClientSpotStreamsV2.SubscribeToAccountUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotAccountUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v2.BybitSocketClientSpotStreamsV2.CheckAuth(Newtonsoft.Json.Linq.JToken,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiAccountV3">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiAccountV3.GetBalancesAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiAccountV3.GetMarginAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3.GetMergedOrderBookAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3.GetKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3.GetTickersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3.GetPricesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3.GetBookPricesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiExchangeDataV3.GetBorrowInterestAndQuotaAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiTradingV3">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiTradingV3.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TimeInForce},System.String,System.Int32,System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiTradingV3.GetOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiTradingV3.GetOpenOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiTradingV3.GetOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiTradingV3.CancelOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiTradingV3.CancelMultipleOrderAsync(System.String,System.Nullable{Bybit.Net.Enums.OrderSide},System.Collections.Generic.IEnumerable{Bybit.Net.Enums.OrderType},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiTradingV3.GetUserTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiTradingV3.PlaceBorrowOrderAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiTradingV3.PlaceRepayOrderAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiTradingV3.GetBorrowRecordsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{Bybit.Net.Enums.BorrowStatus},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiTradingV3.GetRepayRecordsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiV3" />
        </member>
        <member name="P:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.Account">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.Trading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.GetTickersAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.GetKlinesAsync(System.String,System.TimeSpan,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.GetRecentTradesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.PlaceOrderAsync(System.String,CryptoExchange.Net.CommonObjects.CommonOrderSide,CryptoExchange.Net.CommonObjects.CommonOrderType,System.Decimal,System.Nullable{System.Decimal},System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.GetOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.GetOrderTradesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.GetOpenOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.GetClosedOrdersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.CancelOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.GetBalancesAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitClientSpotApiV3.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.SpotApi.v3.BybitSocketClientSpotStreamsV3">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitSocketClientSpotStreamsV3"/>
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitSocketClientSpotStreamsV3.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTradeUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitSocketClientSpotStreamsV3.SubscribeToOrderBookUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitSocketClientSpotStreamsV3.SubscribeToKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitSocketClientSpotStreamsV3.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Spot.v3.BybitSpotBookPriceV3}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitSocketClientSpotStreamsV3.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitSocketClientSpotStreamsV3.SubscribeToAccountUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotAccountUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitSocketClientSpotStreamsV3.SubscribeToUserOrdersUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitSocketClientSpotStreamsV3.SubscribeToUserStopOrdersUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitSocketClientSpotStreamsV3.SubscribeToUserTradesUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.SpotApi.v3.BybitSocketClientSpotStreamsV3.CheckAuth(Newtonsoft.Json.Linq.JToken,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApi">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApi" />
        </member>
        <member name="P:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApi.Account">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApi.GetUrl(System.String)">
            <summary>
            Get url for an endpoint
            </summary>
            <param name="endpoint"></param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApi.TryParseErrorAsync(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.GetUserLastFundingFeeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.GetUserPredictedFundingRateAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.GetRiskLimitAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.SetRiskLimitAsync(System.String,Bybit.Net.Enums.OrderSide,System.Int64,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.GetPositionAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.GetPositionsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.SetAutoAddMarginAsync(System.String,Bybit.Net.Enums.OrderSide,System.Boolean,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.AddReduceMarginAsync(System.String,Bybit.Net.Enums.OrderSide,System.Decimal,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.SetLeverageAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.GetProfitAndLossHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.SetFullPartialPositionModeAsync(System.String,Bybit.Net.Enums.StopLossTakeProfitMode,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.SetPositionModeAsync(System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.SetIsolatedPositionModeAsync(System.String,System.Boolean,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.GetBalancesAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.GetWalletFundHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WalletFundType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WithdrawStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.GetAssetExchangeHistoryAsync(System.Nullable{System.Int64},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiAccount.GetApiKeyInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetLastFundingRateAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetMarkPriceKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetIndexPriceKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetPremiumIndexKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetAnnouncementsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetOpenInterestAsync(System.String,Bybit.Net.Enums.DataPeriod,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetRecentBigTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiExchangeData.GetLongShortRatioAsync(System.String,Bybit.Net.Enums.DataPeriod,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Boolean,System.Boolean,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.GetOrdersAsync(System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderStatus},System.Nullable{Bybit.Net.Enums.SortOrder},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.CancelOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.CancelAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.ModifyOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.GetOpenOrderRealTimeAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.GetOpenOrdersRealTimeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.PlaceConditionalOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,System.Decimal,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Boolean,System.Boolean,System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.GetConditionalOrdersAsync(System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderStatus},System.Nullable{Bybit.Net.Enums.SortOrder},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.CancelConditionalOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.CancelAllConditionalOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.ModifyConditionalOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.GetOpenConditionalOrderRealTimeAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.GetOpenConditionalOrdersRealTimeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitClientUsdPerpetualApiTrading.SetTradingStopAsync(System.String,Bybit.Net.Enums.PositionSide,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams" />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToTradesUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToOrderBooksUpdatesAsync(System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToLiquidationsUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToLiquidationUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToLiquidationUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitPositionUsdPerpetualUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitUsdPerpetualOrderUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToStopOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitUsdPerpetualStopOrderUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitBalanceUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.UsdPerpetualApi.BybitSocketClientUsdPerpetualStreams.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.V5.BybitClientApi">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.V5.IBybitClientApi"/>
        </member>
        <member name="P:Bybit.Net.Clients.V5.BybitClientApi.Account">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.V5.BybitClientApi.ExchangeData">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Clients.V5.BybitClientApi.Trading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApi.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApi.GetUrl(System.String)">
            <summary>
            Get url for an endpoint
            </summary>
            <param name="endpoint"></param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApi.GetServerTimestampAsync">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApi.GetTimeSyncInfo">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApi.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.V5.BybitClientApiAccount">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.SetLeverageAsync(Bybit.Net.Enums.Category,System.String,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.SwitchCrossIsolatedMarginAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.TradeMode,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.SetTakeProfitStopLossModeAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.StopLossTakeProfitMode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.SwitchPositionModeAsync(Bybit.Net.Enums.Category,Bybit.Net.Enums.V5.PositionMode,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.SetRiskLimitAsync(Bybit.Net.Enums.Category,System.String,System.Int32,System.Nullable{Bybit.Net.Enums.V5.PositionIdx},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.SetAutoAddMarginAsync(Bybit.Net.Enums.Category,System.String,System.Boolean,System.Nullable{Bybit.Net.Enums.V5.PositionIdx},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetBalancesAsync(Bybit.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetBorrowHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetCollateralInfoAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetAssetGreeksAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetFeeRateAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetMarginAccountInfoAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetTransactionHistoryAsync(System.Nullable{Bybit.Net.Enums.AccountType},System.Nullable{Bybit.Net.Enums.Category},System.String,System.String,System.Nullable{Bybit.Net.Enums.TransactionLogType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.SetMarginModeAsync(Bybit.Net.Enums.MarginMode,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetAssetInfoAsync(Bybit.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetAllAssetBalancesAsync(Bybit.Net.Enums.AccountType,System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetAssetBalanceAsync(Bybit.Net.Enums.AccountType,System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetTransferableAssetsAsync(Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.CreateInternalTransferAsync(System.String,System.Decimal,Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetInternalTransfersAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.TransferStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.CreateUniversalTransferAsync(System.String,System.Decimal,System.String,System.String,Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetUniversalTransfersAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.TransferStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetAllowedDepositAssetInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.SetDepositAccountAsync(Bybit.Net.Enums.AccountType,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetDepositsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetAssetInfoAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetWithdrawalsAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.WithdrawalType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetDelayedWithdrawQuantityAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.WithdrawAsync(System.String,System.String,System.String,System.Decimal,System.String,System.Nullable{System.Boolean},System.Nullable{Bybit.Net.Enums.AccountType},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.CancelWithdrawalAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiAccount.GetApiKeyInfoAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.V5.BybitClientApiExchangeData">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetAnnouncementsAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetMarkPriceKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetIndexPriceKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetPremiumIndexPriceKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetSpotSymbolsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetOptionSymbolsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetLinearInverseSymbolsAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetOrderbookAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetSpotTickersAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetOptionTickersAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetLinearInverseTickersAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetFundingRateHistoryAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetTradeHistoryAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{Bybit.Net.Enums.OptionType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetOpenInterestAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.OpenInterestInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetHistoricalVolatilityAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetInsuranceAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetRiskLimitAsync(Bybit.Net.Enums.Category,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiExchangeData.GetDeliveryPriceAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.V5.BybitClientApiTrading">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.PlaceOrderAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.NewOrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{Bybit.Net.Enums.TriggerDirection},System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TimeInForce},System.Nullable{Bybit.Net.Enums.V5.PositionIdx},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.EditOrderAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.CancelOrderAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.GetOrdersAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.CancelAllOrderAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.GetOrderHistoryAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.V5.OrderStatus},System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.GetBorrowQuotaAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.OrderSide,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.SetDisconnectCancelAllAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.GetUserTradesAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.GetPositionsAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.GetAssetExchangeHistoryAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.GetDeliveryHistoryAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.GetSettlementHistoryAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.GetClosedProfitLossAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitClientApiTrading.SetTradingStopAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.V5.PositionIdx,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.V5.BybitSocketClientBaseStreams">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientBaseStreams" />
        </member>
        <member name="F:Bybit.Net.Clients.V5.BybitSocketClientBaseStreams._options">
            <summary>
            Options
            </summary>
        </member>
        <member name="F:Bybit.Net.Clients.V5.BybitSocketClientBaseStreams._baseEndpoint">
            <summary>
            Base endpoint
            </summary>
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientBaseStreams.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientBaseStreams.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitTrade}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientBaseStreams.SubscribeToOrderbookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitOrderbook}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitOrderbook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientBaseStreams.SubscribeToOrderbookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitOrderbook}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitOrderbook}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientBaseStreams.SubscribeToKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientBaseStreams.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientBaseStreams.SubscribeToLiquidationUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitLiquidation}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientBaseStreams.SubscribeToLiquidationUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitLiquidation}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.V5.BybitSocketClientLinearStreams">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientLinearStreams" />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientLinearStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitLinearTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientLinearStreams.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitLinearTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientLinearStreams.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientLinearStreams.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientLinearStreams.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientLinearStreams.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientLinearStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientLinearStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientLinearStreams.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.V5.BybitSocketClientOptionStreams">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientOptionStreams" />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientOptionStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitOptionTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientOptionStreams.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitOptionTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientOptionStreams.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientOptionStreams.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientOptionStreams.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientOptionStreams.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientOptionStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientOptionStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientOptionStreams.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.V5.BybitSocketClientPrivateStreams">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientPrivateStreams" />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientPrivateStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitPositionUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientPrivateStreams.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitUserTradeUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientPrivateStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitOrderUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientPrivateStreams.SubscribeToWalletUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitBalance}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientPrivateStreams.SubscribeToGreekUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitGreeks}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientPrivateStreams.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientPrivateStreams.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientPrivateStreams.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientPrivateStreams.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientPrivateStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientPrivateStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientPrivateStreams.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams">
            <inheritdoc cref="T:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientSpotStreams" />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitSpotTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitSpotTickerUpdate}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.SubscribeToLeveragedTokenKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.SubscribeToLeveragedTokenKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.SubscribeToLeveragedTokenTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitLeveragedTokenTicker}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.SubscribeToLeveragedTokenTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitLeveragedTokenTicker}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.SubscribeToLeveragedTokenNavUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitLeveragedTokenNav}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.SubscribeToLeveragedTokenNavUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitLeveragedTokenNav}},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.AuthenticateSocketAsync(CryptoExchange.Net.Sockets.SocketConnection)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.CreateAuthenticationProvider(CryptoExchange.Net.Authentication.ApiCredentials)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.HandleQueryResponse``1(CryptoExchange.Net.Sockets.SocketConnection,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{``0}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.HandleSubscriptionResponse(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription,System.Object,Newtonsoft.Json.Linq.JToken,CryptoExchange.Net.Objects.CallResult{System.Object}@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.MessageMatchesHandler(CryptoExchange.Net.Sockets.SocketConnection,Newtonsoft.Json.Linq.JToken,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Clients.V5.BybitSocketClientSpotStreams.UnsubscribeAsync(CryptoExchange.Net.Sockets.SocketConnection,CryptoExchange.Net.Sockets.SocketSubscription)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Converters.BoolConverter">
            <summary>
            Boolean converter with support for "0"/"1" (strings)
            </summary>
        </member>
        <member name="M:Bybit.Net.Converters.BoolConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Bybit.Net.Converters.BoolConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="P:Bybit.Net.Converters.BoolConverter.CanWrite">
            <summary>
            Specifies that this converter will not participate in writing results.
            </summary>
        </member>
        <member name="M:Bybit.Net.Converters.BoolConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param><param name="value">The value.</param><param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Bybit.Net.Enums.AccountType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.AccountType.Contract">
            <summary>
            Contract account (futures)
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.AccountType.Spot">
            <summary>
            Spot account
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.AccountType.Investment">
            <summary>
            Investment (defi) account
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.AccountType.CopyTrading">
            <summary>
            Copy trading account
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.AccountType.Option">
            <summary>
            Option account
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.AccountType.Fund">
            <summary>
            Funding account
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.AccountType.Unified">
            <summary>
            Unified account
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.BorrowStatus">
            <summary>
            Borrow status
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.BorrowStatus.Total">
            <summary>
            Total
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.BorrowStatus.Cleared">
            <summary>
            Cleared
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.BorrowStatus.NotCleared">
            <summary>
            Not cleared
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.BorrowType">
            <summary>
            Borrow type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.BorrowType.Manual">
            <summary>
            Manual
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.BorrowType.Auto">
            <summary>
            Auto
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.CancelType">
            <summary>
            Cancel type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByUser">
            <summary>
            Cancel by user
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByReduceOnly">
            <summary>
            Cancel by reduce only
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelyByPrepareLiq">
            <summary>
            Cancel due to liquidation
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelAllBeforeLiq">
            <summary>
            Cancel due to liquidation
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByPrepareAdl">
            <summary>
            Cancel due to ADL
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelAllBeforeAdl">
            <summary>
            Cancel due to ADL
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByAdmin">
            <summary>
            Cancel by admin
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByTpSlTsClear">
            <summary>
            Cancel by TP/SL ts clear
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByPzSideCh">
            <summary>
            Cancel by Pz Side Ch
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelBySettle">
            <summary>
            Cancel by setlle
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByCannotAffordOrderCost">
            <summary>
            Cancel by cannot afford
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByPmTrialMmOverEquity">
            <summary>
            Cancel by Pm Trial Mm over equity
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByAccountBlocking">
            <summary>
            Cancel by account blocking
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByDelivery">
            <summary>
            Cancel by delivery
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByMmpTriggered">
            <summary>
            Cancel by market maker protection triggered
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByCrossSelfMuch">
            <summary>
            Cancel by cross self much
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByCrossReachMaxTradeNum">
            <summary>
            Cancel by reached max trade number
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.CancelByDCP">
            <summary>
            Cancel by DCP
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.CancelType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.Category">
            <summary>
            Account type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.Category.Linear">
            <summary>
            Linear perpetual, including USDC perp.
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.Category.Inverse">
            <summary>
            Inverse futures, including inverse perpetual, inverse futures.
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.Category.Spot">
            <summary>
            Spot
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.Category.Option">
            <summary>
            USDC Option
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.Category.Undefined">
            <summary>
            Category not passed
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.ContractType">
            <summary>
            Contract type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.ContractType.Future">
            <summary>
            Future
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.ContractType.Perpetual">
            <summary>
            Perpetual
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.ContractType.LinearPerpetual">
            <summary>
            Linear perpetual
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.ContractTypeV5">
            <summary>
            V5 contract types
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.ContractTypeV5.InversePerpetual">
            <summary>
            Inverse perpetual
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.ContractTypeV5.LinearPerpetual">
            <summary>
            Linear perpetual
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.ContractTypeV5.LinearFutures">
            <summary>
            Linear futures
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.ContractTypeV5.InverseFutures">
            <summary>
            Inverse futures
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.DataPeriod">
            <summary>
            Period
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.DataPeriod.FiveMinutes">
            <summary>
            5min
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.DataPeriod.FifteenMinutes">
            <summary>
            15min
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.DataPeriod.ThirtyMinutes">
            <summary>
            30min
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.DataPeriod.OneHour">
            <summary>
            1h
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.DataPeriod.FourHours">
            <summary>
            4h
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.DataPeriod.OneDay">
            <summary>
            1d
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.DepositStatus">
            <summary>
            Deposit status
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.DepositStatus.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.DepositStatus.ToBeConfirmed">
            <summary>
            Awaiting confirmations
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.DepositStatus.Processing">
            <summary>
            Processing
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.DepositStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.DepositStatus.DepositFailed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.KlineInterval">
            <summary>
            Kline interval, int value represents the time in seconds
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.KlineInterval.OneMinute">
            <summary>
            1
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.KlineInterval.ThreeMinutes">
            <summary>
            3
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.KlineInterval.FiveMinutes">
            <summary>
            5
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.KlineInterval.FifteenMinutes">
            <summary>
            15
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.KlineInterval.ThirtyMinutes">
            <summary>
            30
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.KlineInterval.OneHour">
            <summary>
            60
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.KlineInterval.TwoHours">
            <summary>
            120
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.KlineInterval.FourHours">
            <summary>
            240
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.KlineInterval.SixHours">
            <summary>
            360
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.KlineInterval.TwelveHours">
            <summary>
            720
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.KlineInterval.OneDay">
            <summary>
            D
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.KlineInterval.OneWeek">
            <summary>
            W
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.KlineInterval.OneMonth">
            <summary>
            M
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.LiquidityType">
            <summary>
            Account type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.LiquidityType.Taker">
            <summary>
            Liquidity taker
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.LiquidityType.Maker">
            <summary>
            Liquidity maker
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.LiquidityType.RemovedLiquidity">
            <summary>
            RemovedLiquidity
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.MarginAccountStatus">
            <summary>
            Margin account status
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.MarginAccountStatus.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.MarginAccountStatus.WithdrawalTransferRestricted">
            <summary>
            Withdrawal/Transfer Restricted
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.MarginAccountStatus.LiquidationAlert">
            <summary>
            Liquidation Alert Triggered
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.MarginAccountStatus.Liquidated">
            <summary>
            Liquidated 
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.MarginAccountStatus.NegativeEquity">
            <summary>
            Negative Equity
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.MarginMode">
            <summary>
            Margin mode
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.MarginMode.RegularMargin">
            <summary>
            Regular margin
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.MarginMode.PortfolioMargin">
            <summary>
            Portfolio margin
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.NewOrderType">
            <summary>
            Order type for new orders
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.NewOrderType.Limit">
            <summary>
            Limit order. An order for a set (or better) price
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.NewOrderType.Market">
            <summary>
            Market order. An order for the best price available upon placing
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.OpenInterestInterval">
            <summary>
            Open interest interval, int value represents the time in seconds
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OpenInterestInterval.FiveMinutes">
            <summary>
            5
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OpenInterestInterval.FifteenMinutes">
            <summary>
            15
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OpenInterestInterval.ThirtyMinutes">
            <summary>
            30
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OpenInterestInterval.OneHour">
            <summary>
            60
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OpenInterestInterval.FourHours">
            <summary>
            240
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OpenInterestInterval.OneDay">
            <summary>
            D
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.OptionType">
            <summary>
            Trading type of option
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OptionType.Call">
            <summary>
            Call
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OptionType.Put">
            <summary>
            Put
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.OrderFilter">
            <summary>
            Order filter
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderFilter.Order">
            <summary>
            Active order
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderFilter.StopOrder">
            <summary>
            Conditional order
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderFilter.TpSlOrder">
            <summary>
            Spot TakeProfit/StopLoss order
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.OrderSide">
            <summary>
            Side of an order
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.OrderStatus">
            <summary>
            Order status
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderStatus.Created">
            <summary>
            Created
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderStatus.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderStatus.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderStatus.PartiallyFilled">
            <summary>
            Partially filled
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderStatus.Filled">
            <summary>
            Fully filled
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderStatus.Canceled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderStatus.PendingCancel">
            <summary>
            Pending cancel
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderStatus.PartiallyFilledCanceled">
            <summary>
            Market order was filled to near qty and the remaining USDT retrurned back 
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderStatus.UnTriggered">
            <summary>
            Untriggered
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderType.Limit">
            <summary>
            Limit order. An order for a set (or better) price
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderType.Market">
            <summary>
            Market order. An order for the best price available upon placing
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.OrderType.LimitMaker">
            <summary>
            Limit maker order, only available for SPOT
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.PositionMode">
            <summary>
            Position mode
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.PositionMode.OneWay">
            <summary>
            One way
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.PositionMode.BothSideBuy">
            <summary>
            Buy side of both side mode
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.PositionMode.BothSideSell">
            <summary>
            Sell side of both side mode
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.PositionSide">
            <summary>
            Side of a position
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.PositionSide.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.PositionSide.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.PositionSide.None">
            <summary>
            None
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.PositionStatus">
            <summary>
            Position status
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.PositionStatus.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.PositionStatus.Liqidation">
            <summary>
            Liquidation
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.PositionStatus.AutoDeleverage">
            <summary>
            Auto deleverage
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.RiskRate">
            <summary>
            Order status
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.RiskRate.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.RiskRate.InProgress">
            <summary>
            In progress
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.RiskRate.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.SearchDirection">
            <summary>
            Search direction
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.SearchDirection.Previous">
            <summary>
            Searches in ascending order
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.SearchDirection.Next">
            <summary>
            Searched in descending order
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.SettleDataFilter">
            <summary>
            Account type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.SettleDataFilter.Full">
            <summary>
            Get all positions regardless zero or not based on settle coin
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.SettleDataFilter.Valid">
            <summary>
            Get valid positions based on settle coin
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.SortOrder">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.SortOrder.Descending">
            <summary>
            Searches in descending order
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.SortOrder.Ascending">
            <summary>
            Searched in ascending order
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.StopLossTakeProfitMode">
            <summary>
            StopLoss/TakeProfit mode
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopLossTakeProfitMode.Full">
            <summary>
            Full take profit/stop loss mode (a single TP order and a single SL order can be placed, covering the entire position)
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopLossTakeProfitMode.Partial">
            <summary>
            Partial take profit/stop loss mode (multiple TP and SL orders can be placed, covering portions of the position)
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.StopOrderStatus">
            <summary>
            Stop order status
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderStatus.Active">
            <summary>
            Order has been triggered and the new active order has been successfully placed. Is the final state of a successful conditional order
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderStatus.Untriggered">
            <summary>
            Order yet to be triggered
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderStatus.Triggered">
            <summary>
            Order has been triggered by last traded price
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderStatus.Canceled">
            <summary>
            Order has been canceled successfully
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderStatus.Rejected">
            <summary>
            Order has been triggered but failed to be placed (e.g. due to insufficient margin)
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderStatus.Deactivated">
            <summary>
            Order has been canceled by the user before being triggered
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderStatus.Created">
            <summary>
            Created
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderStatus.New">
            <summary>
            New
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderStatus.PartiallyFilled">
            <summary>
            Partially filled
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderStatus.Filled">
            <summary>
            Fully filled
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderStatus.PendingCancel">
            <summary>
            Pending cancel
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.StopOrderType">
            <summary>
            Stop order type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderType.TakeProfit">
            <summary>
            Take profit
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderType.StopLoss">
            <summary>
            Stop loss
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderType.TrailingStop">
            <summary>
            Trailing stop
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderType.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderType.PartialStopLoss">
            <summary>
            Partial stop loss
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderType.PartialTakeProfit">
            <summary>
            Partial stop loss
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderType.TpSlOrder">
            <summary>
            Spot TP/SL order
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StopOrderType.Unknown">
            <summary>
            Unknown type
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.StreamDerivativesCategory">
            <summary>
            Stream category of Symbol to subscribe for Derivatives public streams
            </summary>
            <remarks> In Bybit, for now, BTCPERP is USDC perp, BTCUSDT is usdt perp, And BTC-10DEC22-20000-C is option.</remarks>
        </member>
        <member name="F:Bybit.Net.Enums.StreamDerivativesCategory.USDTPerp">
            <summary>
            USDT perpetual
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StreamDerivativesCategory.USDCPerp">
            <summary>
            USDC perpetual
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StreamDerivativesCategory.USDCOption">
            <summary>
            USDC option
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.StreamDerivativesCategory.Inverse">
            <summary>
            Inverse
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.SymbolStatus">
            <summary>
            Status of a symbol
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.SymbolStatus.PreLaunch">
            <summary>
            Pre launch
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.SymbolStatus.Trading">
            <summary>
            Currently trading
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.SymbolStatus.Settling">
            <summary>
            Settling
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.SymbolStatus.Delivering">
            <summary>
            Settling
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.SymbolStatus.Closed">
            <summary>
            Closed
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.TickDirection">
            <summary>
            Tick direction
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TickDirection.PlusTick">
            <summary>
            Price rise tick
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TickDirection.ZeroPlusTick">
            <summary>
            Trade occurs at the same price as the previous trade, which occurred at a price higher than that for the trade preceding it
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TickDirection.MinusTick">
            <summary>
            Price drop tick
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TickDirection.ZeroMinusTick">
            <summary>
            Trade occurs at the same price as the previous trade, which occurred at a price lower than that for the trade preceding it
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TimeInForce.GoodTillCanceled">
            <summary>
            Good till canceled by user
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TimeInForce.ImmediateOrCancel">
            <summary>
            Fill at least partially upon placing or cancel
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TimeInForce.FillOrKill">
            <summary>
            Fill fully upon placing or cancel
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TimeInForce.PostOnly">
            <summary>
            Only place order if the order is added to the order book instead of being filled immediately
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.TradeLiquidity">
            <summary>
            Liquidity type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TradeLiquidity.Maker">
            <summary>
            Maker
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TradeLiquidity.Taker">
            <summary>
            Taker
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TradeLiquidity.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.TradeMode">
            <summary>
            Trigger direction
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TradeMode.CrossMargin">
            <summary>
            Cross margin mode
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TradeMode.Isolated">
            <summary>
            Isolated mode
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.TradeType">
            <summary>
            Trade type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TradeType.Trade">
            <summary>
            Normal trade
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TradeType.AdlTrade">
            <summary>
            Adl trade
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TradeType.Funding">
            <summary>
            Funding trade
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TradeType.BustTrade">
            <summary>
            Bankruptcy trade
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TradeType.Settle">
            <summary>
            Settle
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TradeType.Delivery">
            <summary>
            Delivery
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.TransactionLogType">
            <summary>
            Transaction log type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransactionLogType.TransferIn">
            <summary>
            Transfer in
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransactionLogType.TransferOut">
            <summary>
            Transfer out
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransactionLogType.Trade">
            <summary>
            Trade
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransactionLogType.Settlement">
            <summary>
            Settlement
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransactionLogType.Delivery">
            <summary>
            Delivery
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransactionLogType.Liquidation">
            <summary>
            Liquidation
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransactionLogType.Bonus">
            <summary>
            Bonus
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransactionLogType.FeeRefund">
            <summary>
            Fee refund
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransactionLogType.Interest">
            <summary>
            Interest
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransactionLogType.CurrencyBuy">
            <summary>
            Currency buy
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransactionLogType.CurrencySell">
            <summary>
            Currency sell
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.TransferStatus">
            <summary>
            Transfer status
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransferStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransferStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransferStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.TransferType">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransferType.In">
            <summary>
            In transfer
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TransferType.Out">
            <summary>
            Out transfer
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.TriggerDirection">
            <summary>
            Trigger direction
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TriggerDirection.Rise">
            <summary>
            Market price rises to triggerPrice
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TriggerDirection.Fall">
            <summary>
            Market price falls to triggerPrice
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.TriggerType">
            <summary>
            Type of trigger
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TriggerType.LastPrice">
            <summary>
            Last trade price
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TriggerType.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TriggerType.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.TriggerType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.UnifiedMarginStatus">
            <summary>
            Unified margin status
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.UnifiedMarginStatus.Regular">
            <summary>
            Regular account
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.UnifiedMarginStatus.UnifiedMarginAccount">
            <summary>
            Unified margin account, can only trade linear perpetual and options.
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.UnifiedMarginStatus.UnifiedTradeAccount">
            <summary>
            Unified trade account, can trade linear perpetual, options and spot
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.UniversalTransferStatus">
            <summary>
            Transfer status
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.UniversalTransferStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.UniversalTransferStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.UniversalTransferStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.V5.OrderStatus">
            <summary>
            Order status
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.OrderStatus.Created">
            <summary>
            Created but not yet in matching engine
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.OrderStatus.New">
            <summary>
            Placed successfully
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.OrderStatus.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.OrderStatus.PartiallyFilled">
            <summary>
            Partially filled
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.OrderStatus.PartiallyFilledCanceled">
            <summary>
            Partially filled and cancelled
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.OrderStatus.Filled">
            <summary>
            Filled
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.OrderStatus.Cancelled">
            <summary>
            Cancelled
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.OrderStatus.Untriggered">
            <summary>
            Untriggered
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.OrderStatus.Triggered">
            <summary>
            Triggered
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.OrderStatus.Deactivated">
            <summary>
            Deactivated
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.OrderStatus.Active">
            <summary>
            Order has been triggered and the new active order has been successfully placed. Is the final state of a successful conditional order
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.V5.PositionIdx">
            <summary>
            Position idx
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.PositionIdx.OneWayMode">
            <summary>
            One way mode
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.PositionIdx.BuyHedgeMode">
            <summary>
            Buy side of hedge mode
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.PositionIdx.SellHedgeMode">
            <summary>
            Sell side of hedge mode
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.V5.PositionMode">
            <summary>
            Position mode
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.PositionMode.MergedSingle">
            <summary>
            Merge single
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.PositionMode.BothSides">
            <summary>
            Both sides
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.V5.WithdrawalStatus">
            <summary>
            Withdrawal status
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.WithdrawalStatus.SecurityCheck">
            <summary>
            Security check
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.WithdrawalStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.WithdrawalStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.WithdrawalStatus.CanceledByUser">
            <summary>
            Canceled by user
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.WithdrawalStatus.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.WithdrawalStatus.Failed">
            <summary>
            Failed
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.V5.WithdrawalStatus.BlockchainConfirmed">
            <summary>
            Blockchain confirmed
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.WalletFundType">
            <summary>
            Wallet funding type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.Deposit">
            <summary>
            Deposit
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.Withdrawal">
            <summary>
            Withdrawal
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.RealizedPnl">
            <summary>
            Realized profit and loss
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.Commission">
            <summary>
            Commission
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.Refund">
            <summary>
            Refund
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.Prize">
            <summary>
            PRize
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.ExchangeOrderWithdraw">
            <summary>
            Exchange order withdraw
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.ExchangeOrderDeposit">
            <summary>
            Exchange order deposit
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.ReturnServiceCash">
            <summary>
            Refund of handling fee bonus
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.Insurance">
            <summary>
            Insurance account transfer
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.SubMember">
            <summary>
            Mother-child account transfer
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.Coupon">
            <summary>
            Coupon interest
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.AccountTransfer">
            <summary>
            Account transfer
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WalletFundType.Cashback">
            <summary>
            Bash back
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.WithdrawalType">
            <summary>
            Withdrawal type
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WithdrawalType.OnChain">
            <summary>
            On chain
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WithdrawalType.OffChain">
            <summary>
            Off chain
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WithdrawalType.Both">
            <summary>
            Both
            </summary>
        </member>
        <member name="T:Bybit.Net.Enums.WithdrawStatus">
            <summary>
            Withdrawal status
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WithdrawStatus.ToBeConfirmed">
            <summary>
            To be confirmed
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WithdrawStatus.UnderReview">
            <summary>
            Under review
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WithdrawStatus.Pending">
            <summary>
            Pending
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WithdrawStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WithdrawStatus.CanceledByUser">
            <summary>
            Canceled by used
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WithdrawStatus.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="F:Bybit.Net.Enums.WithdrawStatus.Expired">
            <summary>
            Expired
            </summary>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApi">
            <summary>
            Bybit Copy Trading endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiAccount">
            <summary>
            Bybit account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiAccount.GetBalancesAsync(System.Threading.CancellationToken)">
            <summary>
            Get the current wallet balance
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-ct_wallet_balance" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiAccount.TransferAsync(System.String,System.String,System.Decimal,Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.Threading.CancellationToken)">
            <summary>
            Transfer to or from the Copy Trading account
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-ct_wallet_transfer" /></para>
            </summary>
            <param name="transferId">Uninque id</param>
            <param name="asset">Asset to transfer</param>
            <param name="quantity">Quantity to transfer</param>
            <param name="fromAccount">From account type</param>
            <param name="toAccount">To account type</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiExchangeData">
            <summary>
            Bybit Copy Trading exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieve the server timestamp
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-servertime" /></para>
            </summary>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Get a list of supported symbols
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-ct_symbol_list" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiTrading">
            <summary>
            Bybit trading endpoints, placing and managing positions.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiTrading.GetPositionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get your positions
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-ct_wallet_transfer" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiTrading.ClosePositionAsync(System.String,Bybit.Net.Enums.PositionMode,System.Threading.CancellationToken)">
            <summary>
            Close a position
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-ct_positon_close" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="positionMode">Position mode</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiTrading.SetLeverageAsync(System.String,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Set leverage
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-ct_set_leverage" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="buyLeverage">Buy leverage</param>
            <param name="sellLeverage">Sell leverage</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiTrading.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.String,System.Threading.CancellationToken)">
            <summary>
            Place an order
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-ct_create_order" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="price">Price</param>
            <param name="takeProfitPrice">Take profit price</param>
            <param name="stopLossPrice">Stop loss price</param>
            <param name="takeProfitTriggerType">Type of take-profit activation price</param>
            <param name="stopLossTriggerType">Type of stop-loss activation price</param>
            <param name="clientOrderId">Optional user defined id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiTrading.GetOrdersAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get orders
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-ct_order_list" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="orderId">Filter by order id</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="copyTradeOrderType">Filter by copy order type</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiTrading.CancelOrderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel an active order
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-ct_cancel_order" /></para>
            </summary>
            <param name="orderId">Cancel by order id</param>
            <param name="clientOrderId">Cancel by client order id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.CopyTradingApi.IBybitClientCopyTradingApiTrading.CloseOrderAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Close an order
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-ct_close_order" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="clientOrderId">Client order id</param>
            <param name="parentOrderId">Required if not passing parentClientOrderId</param>
            <param name="parentClientOrderId">Required if not passing parentOrderId</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientCopyTradingStreams">
            <summary>
            Bybit copy trading streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientCopyTradingStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.CopyTrading.BybitCopyTradingPositionUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user position updates
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-websocketposition" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientCopyTradingStreams.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.CopyTrading.BybitCopyTradingUserTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user trade updates
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-websocketexecution" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientCopyTradingStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.CopyTrading.BybitCopyTradingOrderUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user order updates
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-websocketorder" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientCopyTradingStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.CopyTrading.BybitCopyTradingBalanceUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user balance updates
            <para><a href="https://bybit-exchange.github.io/docs/copy_trading/#t-websocketwallet" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApi">
            <summary>
            Bybit USD perpetual API endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount">
            <summary>
            Bybit account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and changing account settings
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.GetRiskLimitAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get position risk limit
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-getrisklimit" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.SetRiskLimitAsync(System.String,Bybit.Net.Enums.OrderSide,System.Int64,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set position risk
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-setrisklimit" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="riskId">The risk id to set</param>
            <param name="side">Side</param>
            <param name="positionMode">Position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.GetPositionAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user positions
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-myposition" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.GetPositionsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user positions
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-myposition" /></para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.SetAutoAddMarginAsync(System.String,Bybit.Net.Enums.OrderSide,System.Boolean,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set auto add margin switch
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-setautoaddmargin" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="side">Side</param>
            <param name="autoAddMargin">Auto add or not</param>
            <param name="positionMode">Position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.SetIsolatedPositionModeAsync(System.String,System.Boolean,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Switch Cross/Isolated; must set leverage value when switching from Cross to Isolated
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-marginswitch" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="isIsolated">True is Isolated; false is Cross</param>
            <param name="buyLeverage">Buy leverage</param>
            <param name="sellLeverage">Sell leverage</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.SetPositionModeAsync(System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Switch position mode. If you are in One-Way Mode, you can only open one position on Buy or Sell side;
            If you are in Hedge Mode, you can open both Buy and Sell side positions simultaneously.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-switchpositionmode" /></para>
            </summary>
            <param name="symbol">Symbol. Required if not passing coin</param>
            <param name="asset">Currency alias. Required if not passing symbol</param>
            <param name="hedgeMode">True = HedgeMode, False = OneWayMode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.SetFullPartialPositionModeAsync(System.String,Bybit.Net.Enums.StopLossTakeProfitMode,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Switch between full or partial Stop loss/Take profit mode
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-switchmode" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="mode">New mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.AddReduceMarginAsync(System.String,Bybit.Net.Enums.OrderSide,System.Decimal,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Add/reduce margin
            </summary>
            <param name="symbol">The symbol</param>
            <param name="side">The side</param>
            <param name="margin">Margin to add (positive) or remove (negative)</param>
            <param name="positionMode">Position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.SetLeverageAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set leverage
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-setleverage" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="buyLeverage">Buy leverage</param>
            <param name="sellLeverage">Sell leverage</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.GetProfitAndLossHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user's profit and loss records
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-closedprofitandloss" /></para>
            </summary>
            <param name="symbol">The symbol to get records for</param>
            <param name="startTime">Filter by startTime</param>
            <param name="endTime">Filter by endTime</param>
            <param name="type">Filter by type</param>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.GetWalletFundHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WalletFundType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get wallet fund endpoints
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-walletrecords" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="type">Filter by type</param>
            <param name="pageSize">Page size</param>
            <param name="page">Page</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.GetAssetExchangeHistoryAsync(System.Nullable{System.Int64},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get asset exchange history
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-assetexchangerecords" /></para>
            </summary>
            <param name="fromId">Filter by id</param>
            <param name="direction">Filter by direction</param>
            <param name="limit">Max records</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.GetBalancesAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get wallet balances
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-balance" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WithdrawStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get withdrawal history
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-withdrawrecords" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="status">Filter by status</param>
            <param name="pageSize">Page size</param>
            <param name="page">Page</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.GetUserLastFundingFeeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user last funding fee
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-mylastfundingfee" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.GetUserPredictedFundingRateAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get predicted next funding rate
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-predictedfunding" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiAccount.GetApiKeyInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get Api key info
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-key" /></para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData">
            <summary>
            Bybit exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get the server time
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-servertime" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetAnnouncementsAsync(System.Threading.CancellationToken)">
            <summary>
            The API announcements for the last 30 days
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-announcement" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all supported symbols
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-querysymbol" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            The ticker info for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-latestsymbolinfo" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the current order book for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-orderbook" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get public trade history
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-publictradingrecords" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get price klines
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-querykline" /></para>
            </summary>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetIndexPriceKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get index price klines
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-queryindexpricekline" /></para>
            </summary>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetMarkPriceKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get mark price klines
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-markpricekline" /></para>
            </summary>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetPremiumIndexKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get premium index klines
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-querypremiumindexkline" /></para>
            </summary>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetLongShortRatioAsync(System.String,Bybit.Net.Enums.DataPeriod,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get long/short ratio
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-marketaccountratio" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="period">The data period</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetOpenInterestAsync(System.String,Bybit.Net.Enums.DataPeriod,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the total amount of unsettled contracts. In other words, the total number of contracts held in open positions.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-marketopeninterest" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="period">The period of data</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetRecentBigTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Obtain filled orders worth more than 500,000 USD within the last 24h.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-marketbigdeal" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="limit">The max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiExchangeData.GetLastFundingRateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get last funding rate
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-fundingrate" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading">
            <summary>
            Bybit trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Boolean,System.Boolean,System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-placeactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="timeInForce">Time in force</param>
            <param name="price">Price</param>
            <param name="reduceOnly">True means your position can only reduce in size if this order is triggered</param>
            <param name="closeOnTrigger">For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin.</param>
            <param name="clientOrderId">Client order id</param>
            <param name="takeProfitPrice">Take profit price, only take effect upon opening the position</param>
            <param name="stopLossPrice">Stop loss price, only take effect upon opening the position</param>
            <param name="takeProfitTriggerType">Take profit trigger price type, default: LastPrice</param>
            <param name="stopLossTriggerType">Stop loss trigger price type, default: LastPrice</param>
            <param name="positionMode">Position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.ModifyOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change an exising order. Either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-replaceactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">Stop order id</param>
            <param name="clientOrderId">Client order id</param>
            <param name="newPrice">New price to set</param>
            <param name="newQuantity">New quantity to set</param>
            <param name="takeProfitPrice">New take profit price</param>
            <param name="stopLossPrice">New stop loss price</param>
            <param name="takeProfitTriggerType">New take profit trigger type</param>
            <param name="stopLossTriggerType">New stop loss profit price</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.GetOrdersAsync(System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderStatus},System.Nullable{Bybit.Net.Enums.SortOrder},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get orders
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-getactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">Filter by order id</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="status">Filter by status</param>
            <param name="order">The result order</param>
            <param name="page">The page</param>
            <param name="pageSize">The page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.GetOpenOrdersRealTimeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get order information for up to 500 orders
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-queryactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.GetOpenOrderRealTimeAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get order information. Either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-queryactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId"></param>
            <param name="clientOrderId"></param>
            <param name="receiveWindow"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.CancelOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an order, either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-cancelactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">The id of the order to cancel</param>
            <param name="clientOrderId">The client order id of the conditional order to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.CancelAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all active orders for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-cancelallactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.PlaceConditionalOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,System.Decimal,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Boolean,System.Boolean,System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new conditional order
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-placecond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="basePrice">It will be used to compare with the value of trigger price, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="timeInForce">Time in force</param>
            <param name="price">Price</param>
            <param name="triggerType">Trigger type</param>
            <param name="reduceOnly">True means your position can only reduce in size if this order is triggered. When reduce_only is true, take profit/stop loss cannot be set</param>
            <param name="closeOnTrigger">For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin.</param>
            <param name="clientOrderId">Client order id</param>
            <param name="takeProfitPrice">Take profit price, only take effect upon opening the position</param>
            <param name="stopLossPrice">Stop loss price, only take effect upon opening the position</param>
            <param name="takeProfitTriggerType">Take profit trigger price type, default: LastPrice</param>
            <param name="stopLossTriggerType">Stop loss trigger price type, default: LastPrice</param>
            <param name="positionMode">Position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.ModifyConditionalOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change an exising order. Either stopOrderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-replacecond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="stopOrderId">Stop order id</param>
            <param name="clientOrderId">Client order id</param>
            <param name="newPrice">New price to set</param>
            <param name="newTriggerPrice">New trigger price to set</param>
            <param name="newQuantity">New quantity to set</param>
            <param name="takeProfitPrice">New take profit price</param>
            <param name="stopLossPrice">New stop loss price</param>
            <param name="takeProfitTriggerType">New take profit trigger type</param>
            <param name="stopLossTriggerType">New stop loss profit price</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.GetOpenConditionalOrdersRealTimeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get order information for up to 10 conditional orders
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-querycond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.GetOpenConditionalOrderRealTimeAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get conditional order information. Either stopOrderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-querycond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="stopOrderId">The order id</param>
            <param name="clientOrderId">The client order id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.GetConditionalOrdersAsync(System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderStatus},System.Nullable{Bybit.Net.Enums.SortOrder},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a list of conditional orders
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-getcond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="stopOrderId">Filter by order id</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="status">Filter by status</param>
            <param name="order">Result order</param>
            <param name="pageSize">Page size</param>
            <param name="page">Page</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.CancelConditionalOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel a conditional order, either stopOrderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-cancelcond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="stopOrderId">The id of the conditional order to cancel</param>
            <param name="clientOrderId">The client order id of the conditional order to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.CancelAllConditionalOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all active conditional orders for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-cancelallcond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.GetUserTradesAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get executed user trades
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-usertraderecords" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="type">Filter by type</param>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitClientUsdPerpetualApiTrading.SetTradingStopAsync(System.String,Bybit.Net.Enums.PositionSide,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set take profit, stop loss, and trailing stop for your open position
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-tradingstop" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="side">The position side</param>
            <param name="takeProfitPrice">The new take profit price. Setting it to null will not change the value, setting it to 0 will remove the current TakeProfit</param>
            <param name="stopLossPrice">The new stop loss price. Setting it to null will not change the value, setting it to 0 will remove the current StopLoss</param>
            <param name="trailingStopPrice">Setting it to null will not change the value, setting it to 0 will remove the current TrailingStop</param>
            <param name="takeProfitTriggerType">Take profit trigger type, defaults to LastPrice</param>
            <param name="stopLossTriggerType">Stop loss trigger type, defaults to LastPrice</param>
            <param name="takeProfitQuantity">Take profit quantity when in Partial mode</param>
            <param name="stopLossQuantity">Stop loss quantity when in Partial mode</param>
            <param name="positionMode">Position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams">
            <summary>
            Bybit usd perpetual streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToTradesUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websockettrade" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websockettrade" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websockettrade" /></para>
            </summary>
            <param name="symbols">The symbols to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates. Note that for a symbol the first update is a snapshot, containing all info. After that only partial updates are given for 
            properties which have changed. If a property in the update is `null` it isn't changed and should be ignored.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketinstrumentinfo" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates. Note that for a symbol the first update is a snapshot, containing all info. After that only partial updates are given for 
            properties which have changed. If a property in the update is `null` it isn't changed and should be ignored.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketinstrumentinfo" /></para>
            </summary>
            <param name="symbols">The symbols to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToOrderBooksUpdatesAsync(System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to orderbook updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketorderbook25" /></para>
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketorderbook200" /></para>
            </summary>
            <param name="limit">The amount of rows to receive updates for. Either 25 or 200.</param>
            <param name="snapshotHandler">The event handler for the initial snapshot data</param>
            <param name="updateHandler">The event handler for the update messages</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to orderbook updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketorderbook25" /></para>
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketorderbook200" /></para>
            </summary>
            <param name="limit">The amount of rows to receive updates for. Either 25 or 200.</param>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="snapshotHandler">The event handler for the initial snapshot data</param>
            <param name="updateHandler">The event handler for the update messages</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to orderbook updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketorderbook25" /></para>
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketorderbook200" /></para>
            </summary>
            <param name="limit">The amount of rows to receive updates for. Either 25 or 200.</param>
            <param name="symbols">The symbols to receive updates for</param>
            <param name="snapshotHandler">The event handler for the initial snapshot data</param>
            <param name="updateHandler">The event handler for the update messages</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline (candlestick) updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketkline" /></para>
            </summary>
            <param name="interval">The interval of the klines</param>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline (candlestick) updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketkline" /></para>
            </summary>
            <param name="interval">The interval of the klines</param>
            <param name="symbols">The symbols to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToLiquidationsUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to liquidation order updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketliquidation" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToLiquidationUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to liquidation order updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketliquidation" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToLiquidationUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to liquidation order updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketliquidation" /></para>
            </summary>
            <param name="symbols">The symbols to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitPositionUsdPerpetualUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user position updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketposition" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user trade updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketexecution" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitUsdPerpetualOrderUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user order updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketorder" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToStopOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitUsdPerpetualStopOrderUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user stop order updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketstoporder" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.UsdPerpetualApi.IBybitSocketClientUsdPerpetualStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitBalanceUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user balance updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/linear/#t-websocketwallet" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApi">
            <summary>
            Bybit contract API endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount">
            <summary>
            Bybit account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount.GetPositionAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.SettleDataFilter},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user positions
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-dv_myposition" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="settleAsset">Settle coin. Either symbol or settleCoin is required. If both are passed, symbol is used first.</param>
            <param name="dataFilter">Only work when settleCoin is passed. full: get all positions regardless zero or not based on settle coin. valid: get valid positions based on settle coin</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount.SetAutoAddMarginAsync(System.String,Bybit.Net.Enums.OrderSide,System.Boolean,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set auto add margin switch
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-setautoaddmargin" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="side">Side</param>
            <param name="autoAddMargin">Auto add or not</param>
            <param name="positionMode">Position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount.SetTradeModeAsync(System.String,Bybit.Net.Enums.TradeMode,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Switch cross margin mode/isolated margin mode
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-dv_marginswitch" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="tradeMode">Cross/isolated mode</param>
            <param name="buyLeverage">Buy leverage</param>
            <param name="sellLeverage">Sell leverage</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount.SetPositionModeAsync(Bybit.Net.Enums.PositionMode,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Switch position mode. If you are in One-Way Mode, you can only open one position on Buy or Sell side;
            If you are in Hedge Mode, you can open both Buy and Sell side positions simultaneously.
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-dv_switchpositionmode" /></para>
            </summary>
            <param name="hedgeMode">Hedge mode. OneWay/Hedge are supported</param>
            <param name="symbol">The symbol</param>
            <param name="asset">Currency alias</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount.SetFullPartialPositionModeAsync(System.String,Bybit.Net.Enums.StopLossTakeProfitMode,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Switch between full or partial Stop loss/Take profit mode
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-dv_switchmode" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="mode">New mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount.SetLeverageAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set leverage
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-setleverage" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="buyLeverage">Buy leverage</param>
            <param name="sellLeverage">Sell leverage</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount.SetRiskLimitAsync(System.String,System.Int64,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set position risk
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-setrisklimit" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="riskId">The risk id to set</param>
            <param name="positionMode">Position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount.GetUserTradesAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get executed user trades
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-usertraderecords" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">Filter by order id</param>
            <param name="startTime">Start timestamp in millisecond</param>
            <param name="endTime">End timestamp in millisecond</param>
            <param name="tradeType">Execution type</param>
            <param name="limit">Data quantity per page: Max data value per page is 50, and default value at 20</param>
            <param name="cursor">API pass-through</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount.GetProfitAndLossHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user's closed profit and loss records. The results are ordered in descending order (the first item is the latest).
            </summary>
            <param name="symbol"> Symbol </param>
            <param name="startTime"> Start timestamp point for result, in seconds </param>
            <param name="endTime"> End timestamp point for result, in seconds </param>
            <param name="limit"> Limit for data size per page, max size is 200. Default as showing 50 pieces of data per page. </param>
            <param name="cursor"> Page turning mark </param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount.GetBalancesAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get wallet balances
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-balance" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount.GetTradingFeeRate(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user trading fee rate
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-tradingfeerate" /></para>
            </summary>
            <param name="symbol"> Symbol </param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount.GetWalletFundRecords(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WalletFundType},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user trading fee rate
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-dv_walletrecords" /></para>
            </summary>
            <param name="asset"> Coin </param>
            <param name="startTime">Start timestamp in milliseconds</param>
            <param name="endTime">End timestamp in milliseconds. The past year records ONLY</param>
            <param name="fundType">Wallet fund type</param>
            <param name="limit">Data quantity per page: Max data value per page is 50, and default value at 20</param>
            <param name="cursor">API pass-through</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiAccount.SetMarginMode(Bybit.Net.Enums.MarginMode,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user trading fee rate
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-dv_setmarginmode" /></para>
            </summary>
            <param name="marginMode"> Margin mode </param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiTrading">
            <summary>
            Bybit trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiTrading.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-dv_placeorder" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="timeInForce">Time in force</param>
            <param name="price">Price</param>
            <param name="reduceOnly">True means your position can only reduce in size if this order is triggered</param>
            <param name="closeOnTrigger">For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin.</param>
            <param name="clientOrderId">Client order id</param>
            <param name="takeProfitPrice">Take profit price, only take effect upon opening the position</param>
            <param name="stopLossPrice">Stop loss price, only take effect upon opening the position</param>
            <param name="takeProfitTriggerType">Take profit trigger price type, default: LastPrice</param>
            <param name="stopLossTriggerType">Stop loss trigger price type, default: LastPrice</param>
            <param name="positionMode">Position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiTrading.ReplaceOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change an exising order. Either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_replaceorder" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">Order ID. Required if not passing orderLinkId</param>
            <param name="clientOrderId">Client order id</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="quantity">Quantity</param>
            <param name="price">Quantity</param>
            <param name="takeProfitPrice">Take profit price, only take effect upon opening the position</param>
            <param name="stopLossPrice">Stop loss price, only take effect upon opening the position</param>
            <param name="takeProfitTriggerType">Take profit trigger price type, default: LastPrice</param>
            <param name="stopLossTriggerType">Stop loss trigger price type, default: LastPrice</param>>
            <param name="triggerType">Trigger price type: Market price/Mark price</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiTrading.CancelOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an order, either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-contract_cancelorder" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">The id of the order to cancel</param>
            <param name="clientOrderId">The client order id of the conditional order to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiTrading.CancelAllOrdersAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all orders that are unfilled or partially filled. Fully filled orders cannot be cancelled.
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-contract_cancelallorders" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="settleAsset">Cancel orders by settle coin</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiTrading.GetOrdersAsync(System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderStatus},System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get orders
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-contract_getorder" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">Filter by order id</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="status">Filter by status</param>
            <param name="orderFilter">Conditional order or active order</param>
            <param name="limit"> Limit for data size per page, max size is 200. Default as showing 50 pieces of data per page. </param>
            <param name="cursor"> Page turning mark </param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiTrading.GetOpenOrdersRealTimeAsync(System.String,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query real-time order information
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-contract_getrealtimeorder" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">Filter by order id</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="settleAsset">Settle coin. Either symbol or settleCoin is required. If both are passed, symbol is used first.</param>
            <param name="orderFilter">Conditional order or active order</param>
            <param name="limit"> Limit for data size per page, max size is 200. Default as showing 50 pieces of data per page. </param>
            <param name="cursor"> Page turning mark </param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitClientContractApiTrading.SetTradingStop(System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set take profit, stop loss, and trailing stop for your open position. If using partial mode, TP/SL/TS orders will not close your entire position.
            </summary>
            <param name="symbol">Symbol</param>
            <param name="takeProfitPrice">Cannot be less than 0, 0 means cancel TP</param>
            <param name="stopLossPrice">Cannot be less than 0, 0 means cancel SL</param>
            <param name="activePrice">Trailing stop trigger price. Trailing stop will only be triggered when this price is touched </param>
            <param name="trailingStop">Cannot be less than 0, 0 means cancel TS</param>
            <param name="takeProfitTriggerType">Take profit trigger price type</param>
            <param name="stopLossTriggerType">Stop loss trigger price type</param>
            <param name="stopLossSize">Stop loss quantity</param>
            <param name="takeProfitSize">Take profit quantity</param>
            <param name="positionMode">Position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitSocketClientContractStreams">
            <summary>
            Bybit Contract streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitSocketClientContractStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractPositionUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user position updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-websocketposition" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitSocketClientContractStreams.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractUserTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user trade updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-websocketexecution" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitSocketClientContractStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractOrderUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user order updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-websocketorder" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.ContractApi.IBybitSocketClientContractStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractBalanceUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user balance updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/contract/#t-websocketwallet" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApi">
            <summary>
            Bybit Derivatives v3 endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApi.ContractApi">
            <summary>
            Bybit Contract endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApi.UnifiedMarginApi">
            <summary>
            Bybit Unified Margin endpoints
            </summary>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApiExchangeData">
            <summary>
            Bybit exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get the server time
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-servertime" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApiExchangeData.GetSymbolsAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get all supported symbols
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_instrhead" /></para>
            </summary>
            <param name="category"> Derivatives products category.If category is not passed, then return ""For now, linear inverse option are available</param>
            <param name="symbol">Symbol</param>
            <param name="baseAsset">Base coin.Only valid when category = option.If not passed, BTC by default.</param>
            <param name="limit">Limit for data size per cursor, max size is 1000. Default as showing 500 pieces of data per cursor</param>
            <param name="cursor">API pass-through</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApiExchangeData.GetTickerAsync(Bybit.Net.Enums.Category,System.String,System.Threading.CancellationToken)">
            <summary>
            The ticker info for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_tickerhead" /></para>
            </summary>
            <param name="category">Derivatives products category. If category is not passed, then return ""For now, linear inverse option are available</param>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApiExchangeData.GetOrderBookAsync(System.String,System.Nullable{Bybit.Net.Enums.Category},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the current order book for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_orderbook" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="category">Derivatives products category. If category is not passed, then return ""For now, linear inverse option are available</param>
            <param name="limit">25 by default, 500 is max. If option, only 25 is available</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApiExchangeData.GetKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get price klines
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_querykline" /></para>
            </summary>
            <param name="category">Derivatives products category. If category is not passed, then return ""For now, linear inverse including inverse futures are available</param>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="to">End time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApiExchangeData.GetIndexPriceKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get index price klines
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_indexpricekline" /></para>
            </summary>
            <param name="category">Derivatives products category. If category is not passed, then return ""For now, linear inverse including inverse futures are available</param>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="to">End time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApiExchangeData.GetMarkPriceKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get mark price klines
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_markpricekline" /></para>
            </summary>
            <param name="category">Derivatives products category. If category is not passed, then return ""For now, linear inverse including inverse futures are available</param>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="to">End time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApiExchangeData.GetOpenInterestAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.OpenInterestInterval,Bybit.Net.Enums.DataPeriod,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the total amount of unsettled contracts. In other words, the total number of contracts held in open positions.
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_marketopeninterest" /></para>
            </summary>
            <param name="category">Derivatives products category. If category is not passed, then return ""For now, linear inverse including inverse futures are available</param>
            <param name="symbol">The symbol</param>
            <param name="interval"> Open interest interval type </param>
            <param name="period">The period of data</param>
            <param name="from">Start time of the data</param>
            <param name="to">End time of the data</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApiExchangeData.GetFundingRateAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_historyfundingratehead" /></para>
            </summary>
            <param name="category">Derivatives products category. If category is not passed, then return ""For now, linear inverse including inverse futures are available</param>
            <param name="symbol">The symbol</param>
            <param name="from">Start time of the data</param>
            <param name="to">End time of the data</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApiExchangeData.GetRiskLimitAsync(Bybit.Net.Enums.Category,System.String,System.Threading.CancellationToken)">
            <summary>
            Get Risk Limit
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_risklimithead" /></para>
            </summary>
            <param name="category">Derivatives products category. If category is not passed, then return ""For now, linear inverse including inverse futures are available</param>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApiExchangeData.GetOptionDeliveryPriceAsync(System.Nullable{Bybit.Net.Enums.Category},System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get option delivery price
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_optiondeliveryhead" /></para>
            </summary>
            <param name="category">Derivatives products category. If category is not passed, then return ""For now, linear inverse including inverse futures are available</param>
            <param name="symbol">The symbol</param>
            <param name="baseAsset">Base coin. Only valid when category=option. If not passed, BTC by default.</param>
            <param name="limit">Max amount of results</param>
            <param name="cursor">API pass-through</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitClientDerivativesApiExchangeData.GetTradeHistoryAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{Bybit.Net.Enums.OptionType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get Trade history
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_publictradingrecords" /></para>
            </summary>
            <param name="category">Derivatives products category. If category is not passed, then return ""For now, linear inverse including inverse futures are available</param>
            <param name="symbol">The symbol</param>
            <param name="baseAsset">Base coin. Only valid when category=option. If not passed, BTC by default.</param>
            <param name="optionType">Trading type of option</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitSocketClientDerivativesPublicStreams">
            <summary>
            Bybit public Derivatives streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitSocketClientDerivativesPublicStreams.SubscribeToOrderBookUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.String,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.BybitDerivativesOrderBookEntry}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.BybitDerivativesOrderBookEntry}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to orderbook updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-websocketorderbookdepth" /></para>
            </summary>
            <param name="category">Asset category</param>
            <param name="limit">The amount of rows to receive updates for. Either 1, 25, 50, 100, 200.</param>
            <param name="snapshotHandler">The event handler for the snapshot messages</param>
            <param name="deltaHandler">The event handler for the update messages</param>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitSocketClientDerivativesPublicStreams.SubscribeToOrderBooksUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.BybitDerivativesOrderBookEntry}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.BybitDerivativesOrderBookEntry}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to orderbook updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-websocketorderbookdepth" /></para>
            </summary>
            <param name="category">Asset category</param>
            <param name="limit">The amount of rows to receive updates for. Either 1, 25, 50, 100, 200.</param>
            <param name="snapshotHandler">The event handler for the snapshot messages</param>
            <param name="deltaHandler">The event handler for the update messages</param>
            <param name="symbols">List of symbols to receive updates for</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitSocketClientDerivativesPublicStreams.SubscribeToTradeUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-websockettrade" /></para>
            </summary>
            <param name="category">Asset category</param>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitSocketClientDerivativesPublicStreams.SubscribeToTradesUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-websockettrade" /></para>
            </summary>
            <param name="category">Asset category</param>
            <param name="symbols">List of symbols to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitSocketClientDerivativesPublicStreams.SubscribeToTickerUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.BybitDerivativesTicker}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates. Note that for a symbol the first update is a snapshot, containing all info. After that only partial updates are given for 
            properties which have changed. If a property in the update is `null` it isn't changed and should be ignored.
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-websocketticker_v3" /></para>
            </summary>
            <param name="category">Asset category</param>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="snapshotHandler"> Snapshot handler</param>
            <param name="updateHandler"> Update handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitSocketClientDerivativesPublicStreams.SubscribeToTickersUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.BybitDerivativesTicker}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates. Note that for a symbol the first update is a snapshot, containing all info. After that only partial updates are given for 
            properties which have changed. If a property in the update is `null` it isn't changed and should be ignored.
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-websocketticker_v3" /></para>
            </summary>
            <param name="category">Asset category</param>
            <param name="symbols">List of symbols to receive updates for</param>
            <param name="snapshotHandler"> Snapshot handler</param>
            <param name="updateHandler"> Update handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitSocketClientDerivativesPublicStreams.SubscribeToKlineUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline (candlestick) updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-websocketkline" /></para>
            </summary>
            <param name="category">Asset category</param>
            <param name="interval">The interval of the klines</param>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.IBybitSocketClientDerivativesPublicStreams.SubscribeToKlinesUpdatesAsync(Bybit.Net.Enums.StreamDerivativesCategory,System.Collections.Generic.IEnumerable{System.String},Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline (candlestick) updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-websocketkline" /></para>
            </summary>
            <param name="category">Asset category</param>
            <param name="interval">The interval of the klines</param>
            <param name="symbols">List of symbols to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApi">
            <summary>
            Bybit Unified Margin API endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount">
            <summary>
            Bybit account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount.IsUMAEnabled">
            <summary>
            Check, if Unified Margin Account enabled for current credentials
            </summary>
            <returns> Flag if UMA enabled </returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount.GetWalletBalance(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query wallet balance
            </summary>
            <param name="asset">Currency alias. If the parameter coin is not passed, all wallet balance will be returned. Multiple parameters can be passed, which should be separated using commas, such as USDC, USDT</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount.SetRiskLimitAsync(Bybit.Net.Enums.Category,System.String,System.Int64,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set position risk
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_setrisklimit" /></para>
            </summary>
            <param name="category">Type of derivatives product: linear or option</param>
            <param name="symbol">The symbol</param>
            <param name="riskId">The risk id to set</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount.SetLeverageAsync(Bybit.Net.Enums.Category,System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Modify leverage
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_setleverage" /></para>
            </summary>
            <param name="category">Type of derivatives product: linear or option</param>
            <param name="symbol">Name of Contract</param>
            <param name="buyLeverage">leverage of the corresponding risk limit</param>
            <param name="cellLeverage">leverage of the corresponding risk limit</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns> Flag if successfull </returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount.GetPositionAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user positions
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_myposition" /></para>
            </summary>
            <param name="category">Type of derivatives product: linear or option</param>
            <param name="symbol">Name of Contract</param>
            <param name="baseAsset">Base coin. When category=option. If not passed, BTC by default.</param>
            <param name="direction"></param>
            <param name="limit"></param>
            <param name="cursor"></param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount.SetFullPartialPositionModeAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.StopLossTakeProfitMode,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Switch between full or partial Stop loss/Take profit mode
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_switchmode" /></para>
            </summary>
            <param name="category">Type of derivatives product: linear or option</param>
            <param name="symbol">The symbol</param>
            <param name="mode">New mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount.SetSlTpAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set position TP/SL and trailing stop.
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_switchmode" /></para>
            </summary>
            <param name="category"> Derivatives products category. If category is not passed, then return ""For now, linear is available</param>
            <param name="symbol"> Name of Contract</param>
            <param name="takeProfit"> ≥ 0, if = 0, cancel take-profit (TP)</param>
            <param name="stopLoss"> ≥ 0, if = 0, cancel stop-loss (SL)</param>
            <param name="trailingStop"> ≥ 0, if = 0, cancel trailing stop (TS)</param>
            <param name="tpTriggerBy">Type of take-profit activation price, LastPrice by default</param>
            <param name="slTriggerBy">Type of stop-loss activation price, LastPrice by default</param>
            <param name="activePrice">Trailing stop trigger price. Trailing stop will only be triggered when this price is touched (trailing stop will be immediately triggered by default)</param>
            <param name="slSize">Quantity of stop-loss orders with the TP/SL mode on selected positions</param>
            <param name="tpSize">Quantity of take-profit orders with the TP/SL mode on selected positions</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount.GetTransactionLogAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Query trading history
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_querytransactionlogs" /></para>
            </summary>
            <param name="category">	Type of derivatives product: linear or option</param>
            <param name="asset">USDC, USDT, BTC, and ETH</param>
            <param name="baseAsset">Base coin</param>
            <param name="startTime">Starting timestamp</param>
            <param name="endTime">Ending timestamp</param>
            <param name="direction"></param>
            <param name="limit"></param>
            <param name="cursor"></param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount.TransferFundsAsync(System.String,System.Decimal,System.String,Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Fund transfer between accounts
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_transfer" /></para>
            </summary>
            <param name="transferId">UUID, globally unique</param>
            <param name="amount">Exchanged amount</param>
            <param name="currency">Currency alias</param>
            <param name="fromAccountType">Account type</param>
            <param name="toAccountType">Account type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount.ExchangeCoinsAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Exchange Coins
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_queryexchangerecords" /></para>
            </summary>
            <param name="fromCoint"></param>
            <param name="toCoint"></param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount.GetBorrowHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get Borrow History
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_interestbillstatement" /></para>
            </summary>
            <param name="asset">USDC, USDT, BTC, and ETH</param>
            <param name="startTime">Starting timestamp</param>
            <param name="endTime">Ending timestamp</param>
            <param name="direction"></param>
            <param name="limit"></param>
            <param name="cursor"></param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount.GetBorrowRateAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get borrow rate
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_queryloaninterest" /></para>
            </summary>
            <param name="asset">Only for UDDC, USDT. If not passed, USDT-USDC interests are returned. You could pass multiple currency separated by comma, e.a USDC,USDT</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiAccount.GetProfitAndLossHistoryAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get 7-day Trading History
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_usertraderecords7day" /></para>
            </summary>
            <param name="category"></param>
            <param name="symbol">The symbol</param>
            <param name="baseAsset">Base coin. When category=option. If not passed, BTC by default.</param>
            <param name="orderId">Filter by order id</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="orderFilter">Conditional order or active order</param>
            <param name="startTime">Filter by startTime</param>
            <param name="endTime">Filter by endTime</param>
            <param name="type">Filter by type</param>
            <param name="direction">Search direction</param>
            <param name="limit">Data quantity per page: Max data value per page is 50, and default value at 20</param>
            <param name="cursor">API pass-through</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiTrading">
            <summary>
            Bybit trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiTrading.PlaceOrderAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_placeorder" /></para>
            </summary>
            <param name="category">Type of derivatives product: linear or option.</param>
            <param name="symbol">The symbol</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="timeInForce">Time in force</param>
            <param name="reduceOnly">True means your position can only reduce in size if this order is triggered</param>
            <param name="closeOnTrigger">For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin.</param>
            <param name="marketMakerProtection">Market maker protection, "true" means this order is a market maker protection order.</param>
            <param name="price">c</param>
            <param name="basePrice">It will be used to compare with the value of triggerPrice, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.</param>
            <param name="triggerPrice">Trigger price. If you're expecting the price to rise to trigger your conditional order, make sure triggerPrice more max(market price, basePrice) else, triggerPrice less min (market price, basePrice)</param>
            <param name="positionMode">Position mode</param>
            <param name="triggerType">Trigger price type: Market price/Mark price</param>
            <param name="iv">Implied volatility, for options only; parameters are passed according to the real value; for example, for 10%, 0.1 is passed</param>
            <param name="clientOrderId">Client order id</param>
            <param name="takeProfitPrice">Take profit price, only take effect upon opening the position</param>
            <param name="stopLossPrice">Stop loss price, only take effect upon opening the position</param>
            <param name="takeProfitTriggerType">Take profit trigger price type, default: LastPrice</param>
            <param name="stopLossTriggerType">Stop loss trigger price type, default: LastPrice</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiTrading.ReplaceOrderAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change an exising order. Either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_replaceorder" /></para>
            </summary>
            <param name="category">Type of derivatives product: linear or option.</param>
            <param name="symbol">The symbol</param>
            <param name="orderId">Order ID. Required if not passing orderLinkId</param>
            <param name="clientOrderId">Client order id</param>
            <param name="orderFilter">Conditional order or active order</param>
            <param name="iv">Implied volatility, for options only; parameters are passed according to the real value; for example, for 10%, 0.1 is passed</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="quantity">Quantity</param>
            <param name="price">Quantity</param>
            <param name="takeProfitPrice">Take profit price, only take effect upon opening the position</param>
            <param name="stopLossPrice">Stop loss price, only take effect upon opening the position</param>
            <param name="takeProfitTriggerType">Take profit trigger price type, default: LastPrice</param>
            <param name="stopLossTriggerType">Stop loss trigger price type, default: LastPrice</param>>
            <param name="triggerType">Trigger price type: Market price/Mark price</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiTrading.CancelOrderAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an order, either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_cancelorder" /></para>
            </summary>
            <param name="category">Type of derivatives product: linear or option</param>
            <param name="symbol">The symbol</param>
            <param name="orderId">The id of the order to cancel</param>
            <param name="clientOrderId">The client order id of the conditional order to cancel</param>
            <param name="orderFilter">Conditional order or active order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiTrading.CancelAllOrdersAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all active orders for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_cancelallorders" /></para>
            </summary>
            <param name="category">Type of derivatives product: linear or option</param>
            <param name="baseAsset">Base Coin</param>
            <param name="settleAsset">Settle Coin. It's invalid for option</param>
            <param name="symbol">The symbol</param>
            <param name="orderFilter">Conditional order or active order</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiTrading.GetOrdersAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderStatus},System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get orders
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_getorder" /></para>
            </summary>
            <param name="category"></param>
            <param name="symbol">The symbol</param>
            <param name="baseAsset"></param>
            <param name="orderId">Filter by order id</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="status">Filter by status</param>
            <param name="orderFilter">Conditional order or active order</param>
            <param name="direction">Search direction</param>
            <param name="limit">Data quantity per page: Max data value per page is 50, and default value at 20</param>
            <param name="cursor">API pass-through</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitClientUnifiedMarginApiTrading.GetOpenOrdersRealTimeAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get orders
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-dv_queryorderrealtime" /></para>
            </summary>
            <param name="category"></param>
            <param name="symbol">The symbol</param>
            <param name="baseAsset">Base coin. When category=option. If not passed, BTC by default.</param>
            <param name="orderId">Filter by order id</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="orderFilter">Conditional order or active order</param>
            <param name="direction">Search direction</param>
            <param name="limit">Data quantity per page: Max data value per page is 50, and default value at 20</param>
            <param name="cursor">API pass-through</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitSocketClientUnifiedMarginStreams">
            <summary>
            Bybit Unified margin streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitSocketClientUnifiedMarginStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.UnifiedMargin.BybitUnifiedMarginPositionUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user position updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-websocketposition" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitSocketClientUnifiedMarginStreams.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user trade updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-websocketexecution" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitSocketClientUnifiedMarginStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.Derivatives.UnifiedMargin.BybitUnifiedMarginOrderUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user order updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-websocketorder" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitSocketClientUnifiedMarginStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Derivatives.UnifiedMargin.BybitUnifiedMarginBalance}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user balance updates
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-websocketwallet" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.DerivativesApi.UnifiedMarginApi.IBybitSocketClientUnifiedMarginStreams.SubscribeToGreeksUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitGreeksUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to greeks update
            <para><a href="https://bybit-exchange.github.io/docs/derivativesV3/unified_margin/#t-greeksoption" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApi">
            <summary>
            Bybit general API endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApi.Transfer">
            <summary>
            Endpoints related to asset transfer
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApi.WithdrawDeposit">
            <summary>
            Endpoint related to withrawing/depositing
            </summary>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiTransfer">
            <summary>
            Bybit asset transfer endpoints
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiTransfer.CreateInternalTransferAsync(System.String,System.String,System.Decimal,Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Create a new transfer from one account type to the other
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-createinternaltransfer" /></para>
            </summary>
            <param name="transferId">A generated UUID, should be unique</param>
            <param name="asset">The asset to transfer</param>
            <param name="quantity">Quantity to transfer</param>
            <param name="fromAccountType">From account</param>
            <param name="toAccountType">To account</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiTransfer.CreateSubAccountTransferAsync(System.String,System.String,System.Decimal,System.String,Bybit.Net.Enums.TransferType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Create a new transfer for a subaccount
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-createsubaccounttransfer" /></para>
            </summary>
            <param name="transferId">A generated UUID, should be unique</param>
            <param name="asset">The asset to transfer</param>
            <param name="quantity">Quantity to transfer</param>
            <param name="subAccountId">The sub account id</param>
            <param name="type">The type of the transfer</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiTransfer.GetTransferHistoryAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.TransferStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of transfers
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-querytransferlist" /></para>
            </summary>
            <param name="transferId">Filter by transfer id</param>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="direction">Filter by direction</param>
            <param name="limit">Max amount of results</param>
            <param name="cursor">Page cursor</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiTransfer.GetSubAccountTransferHistoryAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.TransferStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of sub account transfers
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-querysubaccounttransferlist" /></para>
            </summary>
            <param name="transferId">Filter by transfer id</param>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="direction">Filter by direction</param>
            <param name="limit">Max amount of results</param>
            <param name="cursor">Page cursor</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiTransfer.GetSubAccountsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a list of subaccount ids
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-querysubaccountlist" /></para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiTransfer.EnableSubaccountsUniversalTransferAsync(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Enable universal transfers between sub accounts
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-enableuniversaltransfer" /></para>
            </summary>
            <param name="subaccountIds">Sub account ids to enable</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiTransfer.UniversalTransferAsync(System.String,System.String,System.Decimal,System.String,System.String,Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Create a new universal transfer
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-createuniversaltransfer" /></para>
            </summary>
            <param name="transferId">Unique id</param>
            <param name="asset">Asset</param>
            <param name="quantity">Quantity</param>
            <param name="fromMemberId">From id</param>
            <param name="toMemberId">To id</param>
            <param name="fromAccountType">From type</param>
            <param name="toAccountType">To type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiTransfer.GetUniversalTransferHistoryAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.TransferStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get history of universal account transfers
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-queryuniversetransferlist" /></para>
            </summary>
            <param name="transferId">Filter by transfer id</param>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="direction">Filter by direction</param>
            <param name="limit">Max amount of results</param>
            <param name="cursor">Page cursor</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiTransfer.GetAssetBalanceAsync(Bybit.Net.Enums.AccountType,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Coin balance for an account type including Earn
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/v3/#t-queryaccountcoinbalance" /></para>
            </summary>
            <param name="accountType">Account type</param>
            <param name="asset">Asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiWithdrawDeposit">
            <summary>
            Bybit withdrawal and deposit endpoints
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiWithdrawDeposit.GetSupportedDepositMethodsAsync(System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get deposit information
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-allowdepositlist" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="network">Filter by network</param>
            <param name="page">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiWithdrawDeposit.GetDepositHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get deposit history
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-depositsrecordquery" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="direction">Filter by direction</param>
            <param name="limit">Max amount of results</param>
            <param name="cursor">Page cursor</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiWithdrawDeposit.GetWithdrawalHistoryAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get withdrawal history
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-withdrawrecordquery" /></para>
            </summary>
            <param name="withdrawalId">Filter by withdrawal id</param>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="direction">Filter by direction</param>
            <param name="limit">Max amount of results</param>
            <param name="cursor">Page cursor</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiWithdrawDeposit.GetAssetInfoAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get asset information regarding withdrawal/deposits
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-coin_info_query" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiWithdrawDeposit.GetAccountInfoAsync(System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get account info
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-asset_info_query" /></para>
            </summary>
            <param name="asset">Filter asset</param>
            <param name="accountType">Filter account type</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiWithdrawDeposit.WithdrawAsync(System.String,System.String,System.String,System.Decimal,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Create a withdrawal request
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-withdraw_info" /></para>
            </summary>
            <param name="asset">Asset to withdraw</param>
            <param name="network">Network to use</param>
            <param name="address">Address to withdraw to, should be whitelisted</param>
            <param name="quantity">Quantity to withdraw</param>
            <param name="tag">Tag</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiWithdrawDeposit.CancelWithdrawalAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel withdrawal
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-cancel_withdraw" /></para>
            </summary>
            <param name="withdrawalId">Id to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.GeneralApi.IBybitClientGeneralApiWithdrawDeposit.GetDepositAddressesAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get deposit addresses for an asset
            <para><a href="https://bybit-exchange.github.io/docs/account_asset/#t-deposit_addr_info" /></para>
            </summary>
            <param name="asset">The asset to get addresses for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.IBybitClient">
            <summary>
            Client for accessing the Bybit Rest API. 
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitClient.GeneralApi">
            <summary>
            General API endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitClient.InversePerpetualApi">
            <summary>
            Inverse perpetual API endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitClient.UsdPerpetualApi">
            <summary>
            USD perpetual API endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitClient.InverseFuturesApi">
            <summary>
            Inverse futures API endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitClient.SpotApiV1">
            <summary>
            Spot API endpoints (v1)
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitClient.SpotApiV3">
            <summary>
            Spot API endpoints (v3)
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitClient.CopyTradingApi">
            <summary>
            Copy trading API endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitClient.DerivativesApi">
            <summary>
            Derivatives API endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitClient.V5Api">
            <summary>
            V5 API endpoints
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.IBybitClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.IBybitSocketClient">
            <summary>
            Client for accessing the bybit websocket API
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitSocketClient.UsdPerpetualStreams">
            <summary>
            USD perpetual streams
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitSocketClient.SpotStreamsV1">
            <summary>
            Spot streams v1
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitSocketClient.SpotStreamsV2">
            <summary>
            Spot streams v2
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitSocketClient.SpotStreamsV3">
            <summary>
            Spot streams v3
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitSocketClient.InversePerpetualStreams">
            <summary>
            Inverse perpetual streams
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitSocketClient.CopyTrading">
            <summary>
            Copy trading streams
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitSocketClient.DerivativesPublic">
            <summary>
            Derivatives public streams
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitSocketClient.UnifiedMarginPrivate">
            <summary>
            Unified margin private streams
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitSocketClient.ContractPrivate">
            <summary>
            Contract private streams
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitSocketClient.V5SpotStreams">
            <summary>
            V5 Spot streams
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitSocketClient.V5LinearStreams">
            <summary>
            V5 Linear streams
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitSocketClient.V5OptionsStreams">
            <summary>
            V5 Option streams
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.IBybitSocketClient.V5PrivateStreams">
            <summary>
            V5 Private streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.IBybitSocketClient.SetApiCredentials(CryptoExchange.Net.Authentication.ApiCredentials)">
            <summary>
            Set the API credentials for this client. All Api clients in this client will use the new credentials, regardless of earlier set options.
            </summary>
            <param name="credentials">The credentials to set</param>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApi">
            <summary>
            Bybit inverse futures API endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount">
            <summary>
            Bybit account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.GetRiskLimitAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get position risk limit
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-getrisklimit" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.SetRiskLimitAsync(System.String,System.Int64,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set position risk
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-risklimit" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="riskId">The risk id to set</param>
            <param name="mode">Position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.GetPositionAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user positions for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-myposition" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.GetPositionsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user positions
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-myposition" /></para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.ChangeMarginAsync(System.String,Bybit.Net.Enums.PositionMode,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change margin
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-changemargin" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="mode">The position mode</param>
            <param name="margin">The margin</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.SetLeverageAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set leerage
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-setleverage" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="buyLeverage">Buy leverage</param>
            <param name="sellLeverage">Sell leverage</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.SetPositionModeAsync(System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Switch beteen onway and hedge position mode.
            If you are in One-Way Mode, you can only open one position on Buy or Sell side; 
            If you are in Hedge Mode, you can open both Buy and Sell side positions simultaneously.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-switchpositionmode" /></para>
            </summary>
            <param name="symbol">Symbol. Required if not passing coin</param>
            <param name="asset">Currency alias. Required if not passing symbol</param>
            <param name="hedgeMode">Hedgemode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.SetFullPartialPositionModeAsync(System.String,Bybit.Net.Enums.StopLossTakeProfitMode,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Switch between full or partial Stop loss/Take profit mode
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-switchmode" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="mode">New mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.SetIsolatedPositionModeAsync(System.String,System.Boolean,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Switch between cross and isolated mode.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-marginswitch" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="isIsolated">Is isolated</param>
            <param name="buyLeverage">Buy leverage</param>
            <param name="sellLeverage">Sell leverage</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.GetProfitAndLossHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user's profit and loss records
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-closedprofitandloss" /></para>
            </summary>
            <param name="symbol">The symbol to get records for</param>
            <param name="startTime">Filter by startTime</param>
            <param name="endTime">Filter by endTime</param>
            <param name="type">Filter by type</param>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.GetBalancesAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get wallet balances
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-wallet" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.GetWalletFundHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WalletFundType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get wallet fund endpoints
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-walletrecords" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="type">Filter by type</param>
            <param name="pageSize">Page size</param>
            <param name="page">Page</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WithdrawStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get withdrawal history
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-withdrawrecords" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="status">Filter by status</param>
            <param name="pageSize">Page size</param>
            <param name="page">Page</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.GetAssetExchangeHistoryAsync(System.Nullable{System.Int64},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get asset exchange history
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-assetexchangerecords" /></para>
            </summary>
            <param name="fromId">Filter by id</param>
            <param name="direction">Filter by direction</param>
            <param name="limit">Max records</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiAccount.GetApiKeyInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get Api key info
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-key" /></para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiExchangeData">
            <summary>
            Bybit exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get the server time
            <para><a href="https://bybit-exchange.github.io/docs/inverse/#t-servertime" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiExchangeData.GetAnnouncementsAsync(System.Threading.CancellationToken)">
            <summary>
            The API announcements for the last 30 days
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-announcement" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all supported symbols
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/futuresV2/inverse_futures/#t-querysymbol" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiExchangeData.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            The ticker info for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/futuresV2/inverse_futures/#t-latestsymbolinfo" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get public trade history
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-publictradingrecords" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="fromId">Filter by records after this id</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiExchangeData.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the current order book for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-orderbook" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiExchangeData.GetKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get price klines
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-querykline" /></para>
            </summary>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiExchangeData.GetIndexPriceKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get index price klines
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-queryindexpricekline" /></para>
            </summary>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiExchangeData.GetMarkPriceKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get mark price klines
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-markpricekline" /></para>
            </summary>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiExchangeData.GetLongShortRatioAsync(System.String,Bybit.Net.Enums.DataPeriod,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get long/short ratio
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-marketaccountratio" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="period">The data period</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiExchangeData.GetOpenInterestAsync(System.String,Bybit.Net.Enums.DataPeriod,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the total amount of unsettled contracts. In other words, the total number of contracts held in open positions.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-marketopeninterest" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="period">The period of data</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiExchangeData.GetRecentBigTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Obtain filled orders worth more than 500,000 USD within the last 24h.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-marketbigdeal" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="limit">The max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading">
            <summary>
            Bybit trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,Bybit.Net.Enums.PositionMode,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-placeactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="positionMode">Position mode</param>
            <param name="quantity">Quantity</param>
            <param name="timeInForce">Time in force</param>
            <param name="price">Price</param>
            <param name="reduceOnly">True means your position can only reduce in size if this order is triggered</param>
            <param name="closeOnTrigger">For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin.</param>
            <param name="clientOrderId">Client order id</param>
            <param name="takeProfitPrice">Take profit price, only take effect upon opening the position</param>
            <param name="stopLossPrice">Stop loss price, only take effect upon opening the position</param>
            <param name="takeProfitTriggerType">Take profit trigger price type, default: LastPrice</param>
            <param name="stopLossTriggerType">Stop loss trigger price type, default: LastPrice</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.ModifyOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change an exising order. Either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-replaceactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">Stop order id</param>
            <param name="clientOrderId">Client order id</param>
            <param name="newPrice">New price to set</param>
            <param name="newQuantity">New quantity to set</param>
            <param name="takeProfitPrice">New take profit price</param>
            <param name="stopLossPrice">New stop loss price</param>
            <param name="takeProfitTriggerType">New take profit trigger type</param>
            <param name="stopLossTriggerType">New stop loss profit price</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.GetOpenOrderRealTimeAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get order information. Either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-queryactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId"></param>
            <param name="clientOrderId"></param>
            <param name="receiveWindow"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.GetOpenOrdersRealTimeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get order information for up to 500 orders
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-queryactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.GetOrdersAsync(System.String,System.Nullable{Bybit.Net.Enums.OrderStatus},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get orders
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-getactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="status">Filter by status</param>
            <param name="direction">Filter by direction</param>
            <param name="limit">Max amount of results</param>
            <param name="cursor">Page cursor</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.CancelOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an order, either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-cancelactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">The id of the order to cancel</param>
            <param name="clientOrderId">The client order id of the conditional order to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.CancelAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all active orders for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-cancelallactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.PlaceConditionalOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,Bybit.Net.Enums.PositionMode,System.Decimal,System.Decimal,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new conditional order
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-placecond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="positionMode">Position mode</param>
            <param name="quantity">Quantity</param>
            <param name="basePrice">It will be used to compare with the value of trigger price, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="timeInForce">Time in force</param>
            <param name="price">Price</param>
            <param name="triggerType">Trigger type</param>
            <param name="closeOnTrigger">For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin.</param>
            <param name="clientOrderId">Client order id</param>
            <param name="takeProfitPrice">Take profit price, only take effect upon opening the position</param>
            <param name="stopLossPrice">Stop loss price, only take effect upon opening the position</param>
            <param name="takeProfitTriggerType">Take profit trigger price type, default: LastPrice</param>
            <param name="stopLossTriggerType">Stop loss trigger price type, default: LastPrice</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.ModifyConditionalOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change an exising order. Either stopOrderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-replacecond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="stopOrderId">Stop order id</param>
            <param name="clientOrderId">Client order id</param>
            <param name="newPrice">New price to set</param>
            <param name="newTriggerPrice">New trigger price to set</param>
            <param name="newQuantity">New quantity to set</param>
            <param name="takeProfitPrice">New take profit price</param>
            <param name="stopLossPrice">New stop loss price</param>
            <param name="takeProfitTriggerType">New take profit trigger type</param>
            <param name="stopLossTriggerType">New stop loss profit price</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.GetConditionalOrdersAsync(System.String,System.Nullable{Bybit.Net.Enums.StopOrderStatus},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a list of conditional orders
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-getcond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="status">Filter by status</param>
            <param name="direction">Filter by direction</param>
            <param name="limit">Max number of results</param>
            <param name="cursor">Page cursor</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.GetOpenConditionalOrderRealTimeAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get conditional order information. Either stopOrderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-querycond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="stopOrderId">The order id</param>
            <param name="clientOrderId">The client order id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.GetOpenConditionalOrdersRealTimeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get order information for up to 10 conditional orders
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-querycond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.CancelConditionalOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel a conditional order, either stopOrderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-cancelcond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="stopOrderId">The id of the conditional order to cancel</param>
            <param name="clientOrderId">The client order id of the conditional order to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.CancelAllConditionalOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all active conditional orders for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-cancelallcond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.GetUserTradesAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get executed user trades
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-usertraderecords" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">Filter by order id</param>
            <param name="startTime">Filter by start time</param>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InverseFuturesApi.IBybitClientInverseFuturesApiTrading.SetTradingStopAsync(System.String,Bybit.Net.Enums.PositionMode,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set take profit, stop loss, and trailing stop for your open position
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse_futures/#t-tradingstop" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="positionMode">The position mode</param>
            <param name="takeProfitPrice">The new take profit price. Setting it to null will not change the value, setting it to 0 will remove the current TakeProfit</param>
            <param name="stopLossPrice">The new stop loss price. Setting it to null will not change the value, setting it to 0 will remove the current StopLoss</param>
            <param name="trailingStopPrice">Setting it to null will not change the value, setting it to 0 will remove the current TrailingStop</param>
            <param name="takeProfitTriggerType">Take profit trigger type, defaults to LastPrice</param>
            <param name="stopLossTriggerType">Stop loss trigger type, defaults to LastPrice</param>
            <param name="trailingStopTriggerPrice">Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default.</param>
            <param name="takeProfitQuantity">Take profit quantity when in Partial mode</param>
            <param name="stopLossQuantity">Stop loss quantity when in Partial mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApi">
            <summary>
            Bybit inverse perpetual API endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount">
            <summary>
            Bybit account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.GetRiskLimitAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get position risk limit
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-getrisklimit" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.SetRiskLimitAsync(System.String,System.Int64,System.Nullable{Bybit.Net.Enums.PositionMode},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set position risk
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-setrisklimit" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="riskId">The risk id to set</param>
            <param name="mode">Position mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.GetPositionAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user position for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-myposition" /></para>
            </summary>
            <param name="symbol">Symbol to retrieve position for</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.GetPositionsAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user positions
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-myposition" /></para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.ChangeMarginAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change margin
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-changemargin" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="margin">The margin</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.SetLeverageAsync(System.String,System.Decimal,System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set leverage
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-setleverage" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="leverage">Leverage, must be greater than 0 and less than the risk limit leverage</param>
            <param name="leverageOnly">Use this parameter to set leverage while in cross margin mode. If this field is set to false, when leverage is equal to 0 the position will use cross margin; when leverage is greater than 0 the position will use isolated margin. If this field is set to true, you can set leverage in cross margin with leverage. leverage must be greater than 0.</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.GetProfitAndLossHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user's profit and loss records
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-closedprofitandloss" /></para>
            </summary>
            <param name="symbol">The symbol to get records for</param>
            <param name="startTime">Filter by startTime</param>
            <param name="endTime">Filter by endTime</param>
            <param name="type">Filter by type</param>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.SetFullPartialPositionModeAsync(System.String,Bybit.Net.Enums.StopLossTakeProfitMode,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Switch between full or partial Stop loss/Take profit mode
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-switchmode" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="mode">New mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.SetIsolatedPositionModeAsync(System.String,System.Boolean,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Switch between cross and isolated mode.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-marginswitch" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="isIsolated">Is isolated</param>
            <param name="buyLeverage">Buy leverage</param>
            <param name="sellLeverage">Sell leverage</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.GetBalancesAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get wallet balances
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-balance" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.GetWalletFundHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WalletFundType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get wallet fund endpoints
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-walletrecords" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="type">Filter by type</param>
            <param name="pageSize">Page size</param>
            <param name="page">Page</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.GetWithdrawalHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.WithdrawStatus},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get withdrawal history
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-withdrawrecords" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="status">Filter by status</param>
            <param name="pageSize">Page size</param>
            <param name="page">Page</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.GetAssetExchangeHistoryAsync(System.Nullable{System.Int64},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get asset exchange history
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-assetexchangerecords" /></para>
            </summary>
            <param name="fromId">Filter by id</param>
            <param name="direction">Filter by direction</param>
            <param name="limit">Max records</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.GetLastUserFundingFeeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user last funding fee
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-mylastfundingfee" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.GetPredictedUserFundingFeeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get predicted next funding rate
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-predictedfunding" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiAccount.GetApiKeyInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get Api key info
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-key" /></para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData">
            <summary>
            Bybit exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get the server time
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-servertime" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetAnnouncementsAsync(System.Threading.CancellationToken)">
            <summary>
            The API announcements for the last 30 days
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-announcement" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all supported symbols
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-querysymbol" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetTickersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            The ticker info for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-latestsymbolinfo" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetTradeHistoryAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get public trade history
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-publictradingrecords" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="fromId">Filter by records after this id</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetOrderBookAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the current order book for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-orderbook" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get price klines
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-querykline" /></para>
            </summary>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetIndexPriceKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get index price klines
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-queryindexpricekline" /></para>
            </summary>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetPremiumIndexKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get premium index klines
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-querypremiumindexkline" /></para>
            </summary>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetMarkPriceKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get mark price klines
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-markpricekline" /></para>
            </summary>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="from">Start time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetLongShortRatioAsync(System.String,Bybit.Net.Enums.DataPeriod,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get long/short ratio
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-marketaccountratio" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="period">The data period</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetOpenInterestAsync(System.String,Bybit.Net.Enums.DataPeriod,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the total amount of unsettled contracts. In other words, the total number of contracts held in open positions.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-marketopeninterest" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="period">The period of data</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetRecentBigTradesAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Obtain filled orders worth more than 500,000 USD within the last 24h.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-marketbigdeal" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="limit">The max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiExchangeData.GetLastFundingRateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get last funding rate
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-fundingrate" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading">
            <summary>
            Bybit trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-placeactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="timeInForce">Time in force</param>
            <param name="price">Price</param>
            <param name="reduceOnly">True means your position can only reduce in size if this order is triggered</param>
            <param name="closeOnTrigger">For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin.</param>
            <param name="clientOrderId">Client order id</param>
            <param name="takeProfitPrice">Take profit price, only take effect upon opening the position</param>
            <param name="stopLossPrice">Stop loss price, only take effect upon opening the position</param>
            <param name="takeProfitTriggerType">Take profit trigger price type, default: LastPrice</param>
            <param name="stopLossTriggerType">Stop loss trigger price type, default: LastPrice</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.ModifyOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change an exising order. Either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-replaceactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">Stop order id</param>
            <param name="clientOrderId">Client order id</param>
            <param name="newPrice">New price to set</param>
            <param name="newQuantity">New quantity to set</param>
            <param name="takeProfitPrice">New take profit price</param>
            <param name="stopLossPrice">New stop loss price</param>
            <param name="takeProfitTriggerType">New take profit trigger type</param>
            <param name="stopLossTriggerType">New stop loss profit price</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.GetOrdersAsync(System.String,System.Nullable{Bybit.Net.Enums.OrderStatus},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get orders
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-getactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="status">Filter by status</param>
            <param name="direction">Filter by direction</param>
            <param name="limit">Max amount of results</param>
            <param name="cursor">Page cursor</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.GetOpenOrderRealTimeAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get order information. Either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-queryactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId"></param>
            <param name="clientOrderId"></param>
            <param name="receiveWindow"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.GetOpenOrdersRealTimeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get order information for up to 500 orders
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-queryactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.CancelOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an order, either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-cancelactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">The id of the order to cancel</param>
            <param name="clientOrderId">The client order id of the conditional order to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.CancelAllOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all active orders for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-cancelallactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.PlaceConditionalOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,Bybit.Net.Enums.PositionMode,System.Decimal,System.Decimal,System.Decimal,Bybit.Net.Enums.TimeInForce,System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new conditional order
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-placecond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="positionMode">Position mode</param>
            <param name="quantity">Quantity</param>
            <param name="basePrice">It will be used to compare with the value of trigger price, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order.</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="timeInForce">Time in force</param>
            <param name="price">Price</param>
            <param name="triggerType">Trigger type</param>
            <param name="closeOnTrigger">For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin.</param>
            <param name="clientOrderId">Client order id</param>
            <param name="takeProfitPrice">Take profit price, only take effect upon opening the position</param>
            <param name="stopLossPrice">Stop loss price, only take effect upon opening the position</param>
            <param name="takeProfitTriggerType">Take profit trigger price type, default: LastPrice</param>
            <param name="stopLossTriggerType">Stop loss trigger price type, default: LastPrice</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.ModifyConditionalOrderAsync(System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Change an exising order. Either stopOrderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-replacecond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="stopOrderId">Stop order id</param>
            <param name="clientOrderId">Client order id</param>
            <param name="newPrice">New price to set</param>
            <param name="newTriggerPrice">New trigger price to set</param>
            <param name="newQuantity">New quantity to set</param>
            <param name="takeProfitPrice">New take profit price</param>
            <param name="stopLossPrice">New stop loss price</param>
            <param name="takeProfitTriggerType">New take profit trigger type</param>
            <param name="stopLossTriggerType">New stop loss profit price</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.GetConditionalOrdersAsync(System.String,System.Nullable{Bybit.Net.Enums.StopOrderStatus},System.Nullable{Bybit.Net.Enums.SearchDirection},System.Nullable{System.Int32},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get a list of conditional orders
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-getcond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="status">Filter by status</param>
            <param name="direction">Filter by direction</param>
            <param name="limit">Max number of results</param>
            <param name="cursor">Page cursor</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.GetOpenConditionalOrdersRealTimeAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get order information for up to 10 conditional orders
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-querycond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.GetOpenConditionalOrderRealTimeAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get conditional order information. Either stopOrderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-querycond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="stopOrderId">The order id</param>
            <param name="clientOrderId">The client order id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.CancelConditionalOrderAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel a conditional order, either stopOrderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-cancelcond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="stopOrderId">The id of the conditional order to cancel</param>
            <param name="clientOrderId">The client order id of the conditional order to cancel</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.CancelAllConditionalOrdersAsync(System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel all active conditional orders for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-cancelallcond" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.GetUserTradesAsync(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get executed user trades
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-usertraderecords" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">Filter by order id</param>
            <param name="startTime">Filter by start time</param>
            <param name="page">Page</param>
            <param name="pageSize">Page size</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitClientInversePerpetualApiTrading.SetTradingStopAsync(System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Set take profit, stop loss, and trailing stop for your open position
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-tradingstop" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="takeProfitPrice">The new take profit price. Setting it to null will not change the value, setting it to 0 will remove the current TakeProfit</param>
            <param name="stopLossPrice">The new stop loss price. Setting it to null will not change the value, setting it to 0 will remove the current StopLoss</param>
            <param name="trailingStopPrice">Setting it to null will not change the value, setting it to 0 will remove the current TrailingStop</param>
            <param name="takeProfitTriggerType">Take profit trigger type, defaults to LastPrice</param>
            <param name="stopLossTriggerType">Stop loss trigger type, defaults to LastPrice</param>
            <param name="trailingStopTriggerPrice">Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default.</param>
            <param name="takeProfitQuantity">Take profit quantity when in Partial mode</param>
            <param name="stopLossQuantity">Stop loss quantity when in Partial mode</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams">
            <summary>
            Bybit inverse perpetual streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToTradesUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websockettrade" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websockettrade" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websockettrade" /></para>
            </summary>
            <param name="symbols">The symbols to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToTickersUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates. Note that for a symbol the first update is a snapshot, containing all info. After that only partial updates are given for 
            properties which have changed. If a property in the update is `null` it isn't changed and should be ignored.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketinstrumentinfo" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates. Note that for a symbol the first update is a snapshot, containing all info. After that only partial updates are given for 
            properties which have changed. If a property in the update is `null` it isn't changed and should be ignored.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketinstrumentinfo" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates. Note that for a symbol the first update is a snapshot, containing all info. After that only partial updates are given for 
            properties which have changed. If a property in the update is `null` it isn't changed and should be ignored.
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketinstrumentinfo" /></para>
            </summary>
            <param name="symbols">The symbols to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToOrderBooksUpdatesAsync(System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to orderbook updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketorderbook25" /></para>
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketorderbook200" /></para>
            </summary>
            <param name="limit">The amount of rows to receive updates for. Either 25 or 200.</param>
            <param name="snapshotHandler">The event handler for the initial snapshot data</param>
            <param name="updateHandler">The event handler for the update messages</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToOrderBookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to orderbook updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketorderbook25" /></para>
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketorderbook200" /></para>
            </summary>
            <param name="limit">The amount of rows to receive updates for. Either 25 or 200.</param>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="snapshotHandler">The event handler for the initial snapshot data</param>
            <param name="updateHandler">The event handler for the update messages</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToOrderBookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate{Bybit.Net.Objects.Models.BybitOrderBookEntry}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to orderbook updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketorderbook25" /></para>
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketorderbook200" /></para>
            </summary>
            <param name="limit">The amount of rows to receive updates for. Either 25 or 200.</param>
            <param name="symbols">The symbols to receive updates for</param>
            <param name="snapshotHandler">The event handler for the initial snapshot data</param>
            <param name="updateHandler">The event handler for the update messages</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToInsurancesUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitInsuranceUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to insurance fund updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketinsurance" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToInsuranceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitInsuranceUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to insurance fund updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketinsurance" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToInsuranceUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitInsuranceUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to insurance fund updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketinsurance" /></para>
            </summary>
            <param name="symbols">The symbols to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToKlinesUpdatesAsync(Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline (candlestick) updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketklinev2" /></para>
            </summary>
            <param name="interval">The interval of the klines</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline (candlestick) updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketklinev2" /></para>
            </summary>
            <param name="interval">The interval of the klines</param>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline (candlestick) updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketklinev2" /></para>
            </summary>
            <param name="interval">The interval of the klines</param>
            <param name="symbols">The symbols to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToLiquidationsUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to liquidation order updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketliquidation" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToLiquidationUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to liquidation order updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketliquidation" /></para>
            </summary>
            <param name="symbol">The symbol to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToLiquidationUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to liquidation order updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketliquidation" /></para>
            </summary>
            <param name="symbols">The symbols to receive updates for</param>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitPositionUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user position updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketposition" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user trade updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketexecution" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitInverseOrderUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user order updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketorder" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToStopOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitStopOrderUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user stop order updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketstoporder" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.InversePerpetualApi.IBybitSocketClientInversePerpetualStreams.SubscribeToBalanceUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.Socket.BybitBalanceUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to user balance updates
            <para><a href="https://bybit-exchange.github.io/docs/futuresV2/inverse/#t-websocketwallet" /></para>
            </summary>
            <param name="handler">The event handler for the received data</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.SpotApi.IBybitSpotRequestValidable">
            <summary>
            Base for spot websocket request/response processing
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.IBybitSpotRequestValidable.ValidateResponse(Newtonsoft.Json.Linq.JToken,System.Boolean@)">
            <summary>
            Validate response after subscription
            </summary>
            <param name="responseData"> Data </param>
            <param name="forcedExit"> Flag if exit without callback </param>
            <returns> Flag if data valid </returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.IBybitSpotRequestValidable.MatchReponse(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Match response after subscription
            </summary>
            <param name="responseData"> Data </param>
            <returns> Flag if data matched </returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiAccountV1">
            <summary>
            Bybit account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiAccountV1.GetBalancesAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get wallet balances
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-balance" /></para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiAccountV1.GetMarginAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get margin account info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1">
            <summary>
            Bybit exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get the server time
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-servertime" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all supported symbols
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-spot_querysymbol" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the current order book for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-orderbook" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="limit">The number of rows</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1.GetMergedOrderBookAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get merged order book based on the scale
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-mergedorderbook" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="scale">The scale of the order book. 1 means 1 digit</param>
            <param name="limit">The amount of rows</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get public trade history
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-publictradingrecords" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1.GetKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get price klines
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-querykline" /></para>
            </summary>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="startTime">Start time of the data</param>
            <param name="endTime">End time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            The ticker info for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-spot_latestsymbolinfo" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            The ticker info for all symbols
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-spot_latestsymbolinfo" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the last trade price of a symbol
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-lasttradedprice" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1.GetPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get the last trade price of all symbols
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-lasttradedprice" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the best ask/bid price for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-bestbidask" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1.GetBookPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get the best ask/bid prices for all symbols
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-bestbidask" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiExchangeDataV1.GetBorrowInterestAndQuotaAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get borrow info
            </summary>
            <param name="asset">The asset to retrieve info on</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiTradingV1">
            <summary>
            Bybit trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiTradingV1.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TimeInForce},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-placeactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity of the order. Note that for market buy orders this is the quantity of quote asset, otherwise it's in base asset</param>
            <param name="price">Price</param>
            <param name="timeInForce">Time in force</param>
            <param name="clientOrderId">Client order id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiTradingV1.GetOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get order, either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-getactive" /></para>
            </summary>
            <param name="orderId">The id of the order</param>
            <param name="clientOrderId">The client order id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiTradingV1.GetOpenOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get open orders
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-openorders" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">Filter by order id, will only return orders with an orderId smaller than this</param>
            <param name="limit">Max amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiTradingV1.GetOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get orders
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-orderhistory" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="orderId">Filter by order id, will only return orders with an orderId smaller than this</param>
            <param name="limit">Max amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiTradingV1.CancelOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an active order. Either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-cancelactive" /></para>
            </summary>
            <param name="orderId">The order id</param>
            <param name="clientOrderId">The client order id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiTradingV1.CancelMultipleOrderAsync(System.String,System.Nullable{Bybit.Net.Enums.OrderSide},System.Collections.Generic.IEnumerable{Bybit.Net.Enums.OrderType},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel multiple orders based on the provided parameters
            </summary>
            <param name="symbol">The symbol to cancel orders on</param>
            <param name="side">Only cancel buy or sell orders</param>
            <param name="orderTypes">Only cancel orders fitting the order types, default only cancels Limit orders (not LimitMaker orders)</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiTradingV1.GetUserTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user trade history
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-tradehistory" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="fromId">Filter by start id</param>
            <param name="toId">Filter by end id</param>
            <param name="limit">Max amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiTradingV1.PlaceBorrowOrderAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new borrow order
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-borrowmarginloan" /></para>
            </summary>
            <param name="asset">The asset to borrow</param>
            <param name="quantity">The quantity to borrow</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiTradingV1.PlaceRepayOrderAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new borrow order
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-repaymarginloan" /></para>
            </summary>
            <param name="asset">The asset to repay</param>
            <param name="quantity">The quantity to repay</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiTradingV1.GetBorrowRecordsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{Bybit.Net.Enums.BorrowStatus},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get borrow records
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-queryborrowinginfo" /></para>
            </summary>
            <param name="startTime">Filter by borrow time</param>
            <param name="endTime">Filter by borrow time</param>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="limit">Max amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiTradingV1.GetRepayRecordsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get repayment records
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-queryrepaymenthistory" /></para>
            </summary>
            <param name="startTime">Filter by borrow time</param>
            <param name="endTime">Filter by borrow time</param>
            <param name="asset">Filter by asset</param>
            <param name="limit">Max amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiV1">
            <summary>
            Bybit spot API endpoints (v1)
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiV1.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiV1.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiV1.Trading">
            <summary>
            Endpoints related to orders and trades 
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitClientSpotApiV1.CommonSpotClient">
            <summary>
            Get the ISpotClient for this client. This is a common interface which allows for some basic operations without knowing any details of the exchange.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitSocketClientSpotStreamsV1">
            <summary>
            Bybit spot streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitSocketClientSpotStreamsV1.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTradeUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-websockettrade" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitSocketClientSpotStreamsV1.SubscribeToOrderBookUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-websocketdepth" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitSocketClientSpotStreamsV1.SubscribeToKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-websocketkline" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">Interval of the kline data</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitSocketClientSpotStreamsV1.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-websocketrealtimes" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitSocketClientSpotStreamsV1.SubscribeToOrderBookMergedUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to aggregated order book updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-websocketmergeddepth" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="dumpScale">It refers to the number of decimal places, eg 1 for 50000.5 or 0 for 50000</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitSocketClientSpotStreamsV1.SubscribeToOrderBookDiffUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to diff of order book updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-websocketdiffdepth" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v1.IBybitSocketClientSpotStreamsV1.SubscribeToLeverageTokenUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotLeverageUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to leverage token net value updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-websocketltnetvalue" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.SpotApi.v2.IBybitSocketClientSpotStreamsV2">
            <summary>
            Bybit spot streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v2.IBybitSocketClientSpotStreamsV2.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTradeUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-websocketv2trade" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v2.IBybitSocketClientSpotStreamsV2.SubscribeToOrderBookUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-websocketv2depth" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v2.IBybitSocketClientSpotStreamsV2.SubscribeToKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-websocketv2kline" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">Interval of the kline data</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v2.IBybitSocketClientSpotStreamsV2.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Spot.v1.BybitSpotBookPriceV1}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to book price updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-websocketv2bookticker" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v2.IBybitSocketClientSpotStreamsV2.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-websocketv2realtimes" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v2.IBybitSocketClientSpotStreamsV2.SubscribeToAccountUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotAccountUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to account data updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v1/#t-privatetopics" /></para>
            </summary>
            <param name="accountUpdateHandler">Account(balance) update handler</param>
            <param name="orderUpdateHandler">Order update handler</param>
            <param name="stopOrderUpdateHandler"> SL/TP order update handler</param>
            <param name="tradeUpdateHandler">User trade update handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiAccountV3">
            <summary>
            Bybit account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and account settings
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiAccountV3.GetBalancesAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get wallet balances
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-wallet" /></para>
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiAccountV3.GetMarginAccountInfoAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get margin account info
            </summary>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3">
            <summary>
            Bybit exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get the server time
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-servertime" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3.GetSymbolsAsync(System.Threading.CancellationToken)">
            <summary>
            Get all supported symbols
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-getsymbols" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3.GetOrderBookAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get the current order book for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-orderbook" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="limit">The number of rows</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3.GetMergedOrderBookAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get merged order book based on the scale
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-mergedorderbook" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="scale">The scale of the order book. 1 means 1 digit</param>
            <param name="limit">The amount of rows</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3.GetTradeHistoryAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get public trade history
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-publictradingrecords" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="limit">Max amount of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3.GetKlinesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get price klines
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-querykline" /></para>
            </summary>
            <param name="symbol">Symbol of the klines</param>
            <param name="interval">Interval of the kline data</param>
            <param name="startTime">Start time of the data</param>
            <param name="endTime">End time of the data</param>
            <param name="limit">Max amount of candles</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3.GetTickerAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            The ticker info for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-spot_latestsymbolinfo" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3.GetTickersAsync(System.Threading.CancellationToken)">
            <summary>
            The ticker info for all symbols
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-spot_latestsymbolinfo" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3.GetPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the last trade price of a symbol
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-lasttradedprice" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3.GetPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get the last trade price of all symbols
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-lasttradedprice" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3.GetBookPriceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the best ask/bid price for a symbol
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-bestbidask" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3.GetBookPricesAsync(System.Threading.CancellationToken)">
            <summary>
            Get the best ask/bid prices for all symbols
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-bestbidask" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiExchangeDataV3.GetBorrowInterestAndQuotaAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get borrow info
            </summary>
            <param name="asset">The asset to retrieve info on</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiTradingV3">
            <summary>
            Bybit trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiTradingV3.PlaceOrderAsync(System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.OrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TimeInForce},System.String,System.Int32,System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new order
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-placeactive" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity of the order. Note that for market buy orders this is the quantity of quote asset, otherwise it's in base asset</param>
            <param name="price">Price</param>
            <param name="timeInForce">Time in force</param>
            <param name="clientOrderId">Client order id</param>
            <param name="orderCategory"> Order category. 0：normal order; 1：TP/SL order </param>
            <param name="triggerPrice"> Trigger price </param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiTradingV3.GetOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get order, either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/spot/#t-getactive" /></para>
            </summary>
            <param name="orderId">The id of the order</param>
            <param name="clientOrderId">The client order id</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiTradingV3.GetOpenOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get open orders
            <para><a href="https://bybit-exchange.github.io/docs/spot/#t-openorders" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="orderId">Filter by order id, will only return orders with an orderId smaller than this</param>
            <param name="limit">Max amount of results</param>
            <param name="orderCategory">Order category. 0：normal order by default; 1：TP/SL order, Required for TP/SL order.</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiTradingV3.GetOrdersAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get orders
            <para><a href="https://bybit-exchange.github.io/docs/spot/#t-orderhistory" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="orderId">Filter by order id, will only return orders with an orderId smaller than this</param>
            <param name="limit">Max amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiTradingV3.CancelOrderAsync(System.Nullable{System.Int64},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel an active order. Either orderId or clientOrderId should be provided
            <para><a href="https://bybit-exchange.github.io/docs/spot/#t-cancelactive" /></para>
            </summary>
            <param name="orderId">The order id</param>
            <param name="clientOrderId">The client order id</param>
            <param name="orderCategory"> Order category. 0：normal order by default; 1：TP/SL order, Required for TP/SL order. </param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiTradingV3.CancelMultipleOrderAsync(System.String,System.Nullable{Bybit.Net.Enums.OrderSide},System.Collections.Generic.IEnumerable{Bybit.Net.Enums.OrderType},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Cancel multiple orders based on the provided parameters
            </summary>
            <param name="symbol">The symbol to cancel orders on</param>
            <param name="side">Only cancel buy or sell orders</param>
            <param name="orderTypes">Only cancel orders fitting the order types, default only cancels Limit orders (not LimitMaker orders)</param>
            <param name="orderCategory"> Order category. 0：normal order by default; 1：TP/SL order, Required for TP/SL order. </param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiTradingV3.GetUserTradesAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get user trade history
            <para><a href="https://bybit-exchange.github.io/docs/spot/#t-tradehistory" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="fromId">Filter by start id</param>
            <param name="toId">Filter by end id</param>
            <param name="limit">Max amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiTradingV3.PlaceBorrowOrderAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new borrow order
            <para><a href="https://bybit-exchange.github.io/docs/spot/#t-borrowmarginloan" /></para>
            </summary>
            <param name="asset">The asset to borrow</param>
            <param name="quantity">The quantity to borrow</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiTradingV3.PlaceRepayOrderAsync(System.String,System.Decimal,System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Place a new borrow order
            <para><a href="https://bybit-exchange.github.io/docs/spot/#t-repaymarginloan" /></para>
            </summary>
            <param name="asset">The asset to repay</param>
            <param name="quantity">The quantity to repay</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiTradingV3.GetBorrowRecordsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{Bybit.Net.Enums.BorrowStatus},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get borrow records
            <para><a href="https://bybit-exchange.github.io/docs/spot/#t-queryborrowinginfo" /></para>
            </summary>
            <param name="startTime">Filter by borrow time</param>
            <param name="endTime">Filter by borrow time</param>
            <param name="asset">Filter by asset</param>
            <param name="status">Filter by status</param>
            <param name="limit">Max amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiTradingV3.GetRepayRecordsAsync(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Threading.CancellationToken)">
            <summary>
            Get repayment records
            <para><a href="https://bybit-exchange.github.io/docs/spot/#t-queryrepaymenthistory" /></para>
            </summary>
            <param name="startTime">Filter by borrow time</param>
            <param name="endTime">Filter by borrow time</param>
            <param name="asset">Filter by asset</param>
            <param name="limit">Max amount of results</param>
            <param name="receiveWindow">The receive window for which this request is active. When the request takes longer than this to complete the server will reject the request</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiV3">
            <summary>
            Bybit spot API endpoints (v3)
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiV3.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiV3.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiV3.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitClientSpotApiV3.CommonSpotClient">
            <summary>
            Get the ISpotClient for this client. This is a common interface which allows for some basic operations without knowing any details of the exchange.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitSocketClientSpotStreamsV3">
            <summary>
            Bybit spot streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitSocketClientSpotStreamsV3.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTradeUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-websockettrade" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitSocketClientSpotStreamsV3.SubscribeToOrderBookUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-websocketdepth" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitSocketClientSpotStreamsV3.SubscribeToKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/#t-websocketv2kline" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="interval">Interval of the kline data</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitSocketClientSpotStreamsV3.SubscribeToBookPriceUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Spot.v3.BybitSpotBookPriceV3}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to book price updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/#t-websocketv2bookticker" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitSocketClientSpotStreamsV3.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/#t-websocketv2realtimes" /></para>
            </summary>
            <param name="symbol">The symbol</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitSocketClientSpotStreamsV3.SubscribeToAccountUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotAccountUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to account balances update
            <para><a href="https://bybit-exchange.github.io/docs/spot/#t-privatetopics" /></para>
            </summary>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitSocketClientSpotStreamsV3.SubscribeToUserOrdersUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to orders updates
            </summary>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitSocketClientSpotStreamsV3.SubscribeToUserStopOrdersUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to SL/TP orders updates
            <para><a href="https://bybit-exchange.github.io/docs/spot/v3/#t-websocketspotstoporder" /></para>
            </summary>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.SpotApi.v3.IBybitSocketClientSpotStreamsV3.SubscribeToUserTradesUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate}},System.Threading.CancellationToken)">
            <summary>
            Susbcribe to user trade updates
            </summary>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token for closing this subscription</param>
            <returns>A stream subscription. This stream subscription can be used to be notified when the socket is disconnected/reconnected</returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.V5.IBybitClientApi">
            <summary>
            Bybit V5 API endpoints
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.V5.IBybitClientApi.Account">
            <summary>
            Endpoints related to account settings, info or actions
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.V5.IBybitClientApi.ExchangeData">
            <summary>
            Endpoints related to retrieving market and system data
            </summary>
        </member>
        <member name="P:Bybit.Net.Interfaces.Clients.V5.IBybitClientApi.Trading">
            <summary>
            Endpoints related to orders and trades
            </summary>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount">
            <summary>
            Bybit account endpoints. Account endpoints include balance info, withdraw/deposit info and requesting and changing account settings
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.CancelWithdrawalAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Cancel a withdrawal
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/cancel-withdraw" /></para>
            </summary>
            <param name="id">The id of the withdrawal to cancel</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.CreateInternalTransferAsync(System.String,System.Decimal,Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <summary>
            Create an internal transfer between different account types
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/create-inter-transfer" /></para>
            </summary>
            <param name="asset">Coin</param>
            <param name="quantity">Quantity</param>
            <param name="fromAccountType">From account type</param>
            <param name="toAccountType">To account type</param>
            <param name="transferId">Client id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.CreateUniversalTransferAsync(System.String,System.Decimal,System.String,System.String,Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <summary>
            Transfer between main/sub accounts
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/unitransfer" /></para>
            </summary>
            <param name="asset">The asset</param>
            <param name="quantity">Quantity</param>
            <param name="fromMemberId">From member id</param>
            <param name="toMemberId">To member id</param>
            <param name="fromAccountType">From account type</param>
            <param name="toAccountType">To account type</param>
            <param name="transferId">Client id</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetMarginAccountInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get margin configuration info
            <para><a href="https://bybit-exchange.github.io/docs/v5/account/account-info" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetAllAssetBalancesAsync(Bybit.Net.Enums.AccountType,System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get all balances
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/all-balance" /></para>
            </summary>
            <param name="accountType">Account tpye</param>
            <param name="memberId">Member id</param>
            <param name="asset">Asset</param>
            <param name="withBonus">Include bonus</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetAllowedDepositAssetInfoAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get allowed deposit asset info
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/deposit-coin-spec" /></para>
            </summary>
            <param name="asset">Filter on asset</param>
            <param name="network">Filter on network</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetApiKeyInfoAsync(System.Threading.CancellationToken)">
            <summary>
            Get api key info for the current api key
            <para><a href="https://bybit-exchange.github.io/docs/v5/user/apikey-info" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetAssetBalanceAsync(Bybit.Net.Enums.AccountType,System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get asset balance
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/account-coin-balance" /></para>
            </summary>
            <param name="accountType">Account type</param>
            <param name="asset">The asset</param>
            <param name="memberId">Member id</param>
            <param name="withBonus">Include bonus</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetAssetGreeksAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get current account greek info
            <para><a href="https://bybit-exchange.github.io/docs/v5/account/coin-greeks" /></para>
            </summary>
            <param name="baseAsset">Base asset</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetAssetInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get coin info including chain info and withdrawal and deposit status
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/coin-info" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetAssetInfoAsync(Bybit.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <summary>
            Get asset information
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/asset-info" /></para>
            </summary>
            <param name="accountType">Account type (spot only atm)</param>
            <param name="asset">Filter asset</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetBalancesAsync(Bybit.Net.Enums.AccountType,System.String,System.Threading.CancellationToken)">
            <summary>
            Get wallet balance and account info
            <para><a href="https://bybit-exchange.github.io/docs/v5/account/wallet-balance" /></para>
            </summary>
            <param name="accountType">Account info</param>
            <param name="asset">Filter by asset</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetBorrowHistoryAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get borrow history
            <para><a href="https://bybit-exchange.github.io/docs/v5/account/borrow-history" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetCollateralInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get the collateral information of the current unified margin account, including loan interest rate, loanable amount, collateral conversion rate, whether it can be mortgaged as margin, etc.
            <para><a href="https://bybit-exchange.github.io/docs/v5/account/collateral-info" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetDelayedWithdrawQuantityAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get delayed withdrawal amount
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/delay-amount" /></para>
            </summary>
            <param name="asset">The asset</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetDepositAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get the master deposit address for an asset
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/master-deposit-addr" /></para>
            </summary>
            <param name="asset">Asset</param>
            <param name="networkType">Network type</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetDepositsAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get list of deposits
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/deposit-record" /></para>
            </summary>
            <param name="asset">Filter by asset</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetFeeRateAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get fee rates
            <para><a href="https://bybit-exchange.github.io/docs/v5/account/fee-rate" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Filter by symbol</param>
            <param name="baseAsset">Filter by base asset</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetInternalTransfersAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.TransferStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get internal transfer history
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/inter-transfer-list" /></para>
            </summary>
            <param name="transferId">Filter by tansfer id</param>
            <param name="asset">Filter by asset</param>
            <param name="transferStatus">Filter by status</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetTransactionHistoryAsync(System.Nullable{Bybit.Net.Enums.AccountType},System.Nullable{Bybit.Net.Enums.Category},System.String,System.String,System.Nullable{Bybit.Net.Enums.TransactionLogType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get transaction logs in Unified account.
            <para><a href="https://bybit-exchange.github.io/docs/v5/account/transaction-log" /></para>
            </summary>
            <param name="accountType">Filter by account type</param>
            <param name="category">Filter by category</param>
            <param name="asset">Filter by asset</param>
            <param name="baseAsset">Filter by base asset</param>
            <param name="type">Filter by type</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetTransferableAssetsAsync(Bybit.Net.Enums.AccountType,Bybit.Net.Enums.AccountType,System.Threading.CancellationToken)">
            <summary>
            Get a list of transferable assets between accounts
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/transferable-coin" /></para>
            </summary>
            <param name="fromAccountType">From account type</param>
            <param name="toAccountType">To account type</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetUniversalTransfersAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.TransferStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get universal transfer history
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/unitransfer-list" /></para>
            </summary>
            <param name="transferId">Filter by tansfer id</param>
            <param name="asset">Filter by asset</param>
            <param name="transferStatus">Filter by status</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.GetWithdrawalsAsync(System.String,System.String,System.Nullable{Bybit.Net.Enums.WithdrawalType},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get withdrawal history
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/withdraw-record" /></para>
            </summary>
            <param name="withdrawId">Filter by withdrawal id</param>
            <param name="asset">Filter by asset</param>
            <param name="type">Filter by type</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.SetAutoAddMarginAsync(Bybit.Net.Enums.Category,System.String,System.Boolean,System.Nullable{Bybit.Net.Enums.V5.PositionIdx},System.Threading.CancellationToken)">
            <summary>
            Set auto add margin
            <para><a href="https://bybit-exchange.github.io/docs/v5/position/add-margin" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="autoAddMargin">Auto add margin or not</param>
            <param name="positionIdx">Position idx</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.SetDepositAccountAsync(Bybit.Net.Enums.AccountType,System.Threading.CancellationToken)">
            <summary>
            Set the account deposits are credited to
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/set-deposit-acct" /></para>
            </summary>
            <param name="accountType">The account</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.SetLeverageAsync(Bybit.Net.Enums.Category,System.String,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Set leverage
            <para><a href="https://bybit-exchange.github.io/docs/v5/position/leverage" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="buyLeverage">Buy leverage. Must be the same as sellLeverage under one-way mode</param>
            <param name="sellLeverage">Sell leverage. Must be the same as sellLeverage under one-way mode</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.SetMarginModeAsync(Bybit.Net.Enums.MarginMode,System.Threading.CancellationToken)">
            <summary>
            Set the margin mode
            <para><a href="https://bybit-exchange.github.io/docs/v5/account/set-margin-mode" /></para>
            </summary>
            <param name="marginMode">Margin mode</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.SetRiskLimitAsync(Bybit.Net.Enums.Category,System.String,System.Int32,System.Nullable{Bybit.Net.Enums.V5.PositionIdx},System.Threading.CancellationToken)">
            <summary>
            Set the risk limit
            <para><a href="https://bybit-exchange.github.io/docs/v5/position/set-risk-limit" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="riskId">Risk id</param>
            <param name="positionIdx">Position idx</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.SetTakeProfitStopLossModeAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.StopLossTakeProfitMode,System.Threading.CancellationToken)">
            <summary>
            Set take profit/stop loss mode
            <para><a href="https://bybit-exchange.github.io/docs/v5/position/tpsl-mode" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="tpSlMode">Mode</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.SwitchCrossIsolatedMarginAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.TradeMode,System.Decimal,System.Decimal,System.Threading.CancellationToken)">
            <summary>
            Switch cross or isolated margin mode
            <para><a href="https://bybit-exchange.github.io/docs/v5/position/cross-isolate" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="tradeMode">Trade mode</param>
            <param name="buyLeverage">Buy leverage</param>
            <param name="sellLeverage">Sell leverage</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.SwitchPositionModeAsync(Bybit.Net.Enums.Category,Bybit.Net.Enums.V5.PositionMode,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Switch position mode
            <para><a href="https://bybit-exchange.github.io/docs/v5/position/position-mode" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="mode">Mode</param>
            <param name="symbol">Symbol</param>
            <param name="asset">Asset</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiAccount.WithdrawAsync(System.String,System.String,System.String,System.Decimal,System.String,System.Nullable{System.Boolean},System.Nullable{Bybit.Net.Enums.AccountType},System.Threading.CancellationToken)">
            <summary>
            Withdraw funds
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/withdraw" /></para>
            </summary>
            <param name="asset">Asset</param>
            <param name="network">Network to use</param>
            <param name="toAddress">Target address</param>
            <param name="quantity">Quantity</param>
            <param name="tag">Tag</param>
            <param name="forceNetwork">Force on-chain withdrawal</param>
            <param name="accountType">Account type to withdraw from</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData">
            <summary>
            Bybit exchange data endpoints. Exchange data includes market data (tickers, order books, etc) and system status.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetAnnouncementsAsync(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get server announcements
            <para><a href="https://bybit-exchange.github.io/docs/v5/announcement" /></para>
            </summary>
            <param name="locale">Language</param>
            <param name="type">Filter by type</param>
            <param name="tag">Filter by tag</param>
            <param name="page">Page</param>
            <param name="limit">Page size</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetServerTimeAsync(System.Threading.CancellationToken)">
            <summary>
            Get server time
            <para><a href="https://bybit-exchange.github.io/docs/v3/server-time" /></para>
            </summary>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetDeliveryPriceAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get delivery price
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/delivery-price" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Filter by symbol</param>
            <param name="baseAsset">Filter by base asset</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetFundingRateHistoryAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get funding rate history
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/history-fund-rate" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="startTime">Fitler by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetHistoricalVolatilityAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get historical volatility
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/iv" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="baseAsset">Filter by base asset</param>
            <param name="period">Period</param>
            <param name="startTime">Fitler by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetIndexPriceKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get index price klines
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/index-kline" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="interval">Kline interval</param>
            <param name="startTime">Fitler by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetInsuranceAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get insurance pool data
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/insurance" /></para>
            </summary>
            <param name="asset">Asset</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get klines
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/kline" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="interval">Kline interval</param>
            <param name="startTime">Fitler by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetLinearInverseSymbolsAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get linear/inverse symbols
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/instrument" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="baseAsset">Base asset</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetLinearInverseTickersAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get linear/inverse tickers
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/tickers" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="baseAsset">Base asset</param>
            <param name="expirationDate">Expiration date</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetMarkPriceKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get mark price klines
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/mark-kline" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="interval">Kline interval</param>
            <param name="startTime">Fitler by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetOpenInterestAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.OpenInterestInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get open interest
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/open-interest" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="interestInterval">Interval</param>
            <param name="startTime">Fitler by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetOptionSymbolsAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get option symbols
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/instrument" /></para>
            </summary>
            <param name="symbol">Symbol</param>
            <param name="baseAsset">Base asset</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetOptionTickersAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get option tickers
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/tickers" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="baseAsset">Filter by asset</param>
            <param name="expirationDate">Expiration date</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetOrderbookAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get order book
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/orderbook" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="limit">Limit of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetPremiumIndexPriceKlinesAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.KlineInterval,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get premium index klines
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/preimum-index-kline" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="interval">Kline interval</param>
            <param name="startTime">Fitler by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results per page</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetRiskLimitAsync(Bybit.Net.Enums.Category,System.String,System.Threading.CancellationToken)">
            <summary>
            Get risk limits
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetSpotSymbolsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Get spot symbols
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/instrument" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetSpotTickersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Spot tickers
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/tickers" /></para>
            </summary>
            <param name="symbol">Filter by symbol</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiExchangeData.GetTradeHistoryAsync(Bybit.Net.Enums.Category,System.String,System.String,System.Nullable{Bybit.Net.Enums.OptionType},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Get trade history
            <para><a href="https://bybit-exchange.github.io/docs/v5/market/recent-trade" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="baseAsset">Base asset</param>
            <param name="optionType">Option type</param>
            <param name="limit">Limit of results</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading">
            <summary>
            Bybit trading endpoints, placing and managing orders.
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.CancelAllOrderAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Threading.CancellationToken)">
            <summary>
            Cancel all orders
            <para><a href="https://bybit-exchange.github.io/docs/v5/order/cancel-all" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Filter by symbol</param>
            <param name="baseAsset">Filter by base asset</param>
            <param name="settleAsset">Filter by settle asset</param>
            <param name="orderFilter">Order filter</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.CancelOrderAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.OrderFilter},System.Threading.CancellationToken)">
            <summary>
            Cancel order
            <para><a href="https://bybit-exchange.github.io/docs/v5/order/cancel-order" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="orderId">Cancel by order id</param>
            <param name="clientOrderId">Cancel by client order id</param>
            <param name="orderFilter">Order filter</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.EditOrderAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Threading.CancellationToken)">
            <summary>
            Edit an order
            <para><a href="https://bybit-exchange.github.io/docs/v5/order/amend-order" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="orderId">Order id of the order to edit</param>
            <param name="clientOrderId">Client order id of the order to edit</param>
            <param name="quantity">New quantity</param>
            <param name="price">New price</param>
            <param name="triggerPrice">New trigger price</param>
            <param name="triggerBy">New trigger </param>
            <param name="orderIv">New order Iv</param>
            <param name="takeProfit">New take profit price</param>
            <param name="stopLoss">New stop loss price</param>
            <param name="takeProfitTriggerBy">New take profit trigger</param>
            <param name="stopLossTriggerBy">New stop profit trigger</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.GetAssetExchangeHistoryAsync(System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get asset exchange history
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/exchange" /></para>
            </summary>
            <param name="fromAsset">Filter by from asset</param>
            <param name="toAsset">Filter by to asset</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.GetBorrowQuotaAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.OrderSide,System.Threading.CancellationToken)">
            <summary>
            Get spot borrow quota
            <para><a href="https://bybit-exchange.github.io/docs/v5/order/spot-borrow-quota" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="side">Side</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.GetDeliveryHistoryAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get delivery history
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/delivery" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Filter by symbol</param>
            <param name="expiryDate">Filter by expiry date</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.GetOrdersAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get real-time open orders
            <para><a href="https://bybit-exchange.github.io/docs/v5/order/open-order" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Filter by symbol</param>
            <param name="baseAsset">Filter by base asset</param>
            <param name="settleAsset">Filter by settle asset</param>
            <param name="orderId">Filter by order id</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="openOnly">Open only</param>
            <param name="orderFilter">Order filter</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.GetOrderHistoryAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.String,System.Nullable{Bybit.Net.Enums.V5.OrderStatus},System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get order history
            <para><a href="https://bybit-exchange.github.io/docs/v5/order/order-list" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Filter by symbol</param>
            <param name="baseAsset">Filter by base asset</param>
            <param name="orderId">Filter by order id</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="status">Filter by status</param>
            <param name="orderFilter">Order filter</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.GetPositionsAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get positions
            <para><a href="https://bybit-exchange.github.io/docs/v5/position" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Filter by symbol</param>
            <param name="baseAsset">Filter by base asset</param>
            <param name="settleAsset">Filter by settle asset</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.GetSettlementHistoryAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get settlement history
            <para><a href="https://bybit-exchange.github.io/docs/v5/asset/settlement" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Filter by symbol</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.GetUserTradesAsync(Bybit.Net.Enums.Category,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Bybit.Net.Enums.TradeType},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get user trade history
            <para><a href="https://bybit-exchange.github.io/docs/v5/position/execution" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Filter by symbol</param>
            <param name="baseAsset">Filter by base asset</param>
            <param name="orderId">Filter by order id</param>
            <param name="clientOrderId">Filter by client order id</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="tradeType">Filter by trade type</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.PlaceOrderAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.OrderSide,Bybit.Net.Enums.NewOrderType,System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{Bybit.Net.Enums.TriggerDirection},System.Nullable{Bybit.Net.Enums.OrderFilter},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TimeInForce},System.Nullable{Bybit.Net.Enums.V5.PositionIdx},System.String,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Place an order
            <para><a href="https://bybit-exchange.github.io/docs/v5/order/create-order" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="side">Order side</param>
            <param name="type">Order type</param>
            <param name="quantity">Quantity</param>
            <param name="price">Price</param>
            <param name="isLeverage">Is leverage</param>
            <param name="triggerDirection">Conditional order diraction</param>
            <param name="orderFilter">Order filter</param>
            <param name="triggerPrice">Trigger price</param>
            <param name="triggerBy">Trigger by</param>
            <param name="orderIv">Order implied volatility</param>
            <param name="timeInForce">Time in force</param>
            <param name="positionIdx">Position idx</param>
            <param name="clientOrderId">Client order id</param>
            <param name="takeProfit">Take profit price</param>
            <param name="stopLoss">Stop loss price</param>
            <param name="takeProfitTriggerBy">Take profit trigger</param>
            <param name="stopLossTriggerBy">Stop loss trigger</param>
            <param name="reduceOnly">Is reduce only</param>
            <param name="closeOnTrigger">Close on trigger</param>
            <param name="marketMakerProtection">Market maker protection</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.SetDisconnectCancelAllAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Set cancel all timeout on websocket disconnect
            <para><a href="https://bybit-exchange.github.io/docs/v5/order/dcp" /></para>
            </summary>
            <param name="windowSeconds">Time after which to cancel all orders</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.SetTradingStopAsync(Bybit.Net.Enums.Category,System.String,Bybit.Net.Enums.V5.PositionIdx,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{Bybit.Net.Enums.TriggerType},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Threading.CancellationToken)">
            <summary>
            Set trading stop parameters
            <para><a href="https://bybit-exchange.github.io/docs/v5/position/trading-stop" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Symbol</param>
            <param name="positionIdx">Position idx</param>
            <param name="takeProfit">Take profit price</param>
            <param name="stopLoss">Stop loss price</param>
            <param name="trailingStop">Trailing stop</param>
            <param name="takeProfitTrigger">Take profit trigger</param>
            <param name="stopLossTrigger">Stop loss trigger</param>
            <param name="activePrice">Active price</param>
            <param name="takeProfitQuantity">Take profit quantity</param>
            <param name="stopLossQuantity">Stop loss quantity</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitClientApiTrading.GetClosedProfitLossAsync(Bybit.Net.Enums.Category,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Get closed profit and loss
            <para><a href="https://bybit-exchange.github.io/docs/v5/position/close-pnl" /></para>
            </summary>
            <param name="category">Category</param>
            <param name="symbol">Filter by symbol</param>
            <param name="startTime">Filter by start time</param>
            <param name="endTime">Filter by end time</param>
            <param name="limit">Number of results per page</param>
            <param name="cursor">Pagination cursor</param>
            <param name="ct">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientBaseStreams">
            <summary>
            Bybit streaming data subscriptions
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientBaseStreams.SubscribeToKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/kline" /></para>
            </summary>
            <param name="symbols">The symbols to subscribe</param>
            <param name="interval">Kline interval</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientBaseStreams.SubscribeToKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to kline updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/kline" /></para>
            </summary>
            <param name="symbol">The symbol to subscribe</param>
            <param name="interval">Kline interval</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientBaseStreams.SubscribeToLiquidationUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitLiquidation}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to liquidation updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/liquidation" /></para>
            </summary>
            <param name="symbols">The symbols to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientBaseStreams.SubscribeToLiquidationUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitLiquidation}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to liquidation updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/liquidation" /></para>
            </summary>
            <param name="symbol">The symbol to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientBaseStreams.SubscribeToOrderbookUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitOrderbook}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitOrderbook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/orderbook" /></para>
            </summary>
            <param name="symbols">The symbols to subscribe</param>
            <param name="depth">The order book depth</param>
            <param name="snapshotHandler">Handler for a snapshot update. Snapshot updates contain the full order book</param>
            <param name="updateHandler">Handler for updates. These will only contain the changed entries</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientBaseStreams.SubscribeToOrderbookUpdatesAsync(System.String,System.Int32,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitOrderbook}},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitOrderbook}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order book updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/orderbook" /></para>
            </summary>
            <param name="symbol">The symbol to subscribe</param>
            <param name="depth">The order book depth</param>
            <param name="snapshotHandler">Handler for a snapshot update. Snapshot updates contain the full order book</param>
            <param name="updateHandler">Handler for updates. These will only contain the changed entries</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientBaseStreams.SubscribeToTradeUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/trade" /></para>
            </summary>
            <param name="symbols">The symbols to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientBaseStreams.SubscribeToTradeUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitTrade}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to public trade updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/trade" /></para>
            </summary>
            <param name="symbol">The symbol to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientLinearStreams">
            <summary>
            Bybit linear data streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientLinearStreams.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitLinearTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/ticker" /></para>
            </summary>
            <param name="symbols">The symbols to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientLinearStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitLinearTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/ticker" /></para>
            </summary>
            <param name="symbol">The symbol to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientOptionStreams">
            <summary>
            Bybit option data streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientOptionStreams.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitOptionTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/ticker" /></para>
            </summary>
            <param name="symbols">The symbols to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientOptionStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitOptionTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/ticker" /></para>
            </summary>
            <param name="symbol">The symbol to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientPrivateStreams">
            <summary>
            Bybit user data streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientPrivateStreams.SubscribeToGreekUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitGreeks}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to Greek updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/private/greek" /></para>
            </summary>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientPrivateStreams.SubscribeToOrderUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitOrderUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to order updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/private/order" /></para>
            </summary>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientPrivateStreams.SubscribeToPositionUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitPositionUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to position updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/private/position" /></para>
            </summary>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientPrivateStreams.SubscribeToUserTradeUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitUserTradeUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to trade updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/private/execution" /></para>
            </summary>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientPrivateStreams.SubscribeToWalletUpdatesAsync(System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitBalance}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to wallet balance updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/private/wallet" /></para>
            </summary>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientSpotStreams">
            <summary>
            Bybit spot data streams
            </summary>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientSpotStreams.SubscribeToLeveragedTokenKlineUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to leveraged token kline updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/etp-kline" /></para>
            </summary>
            <param name="symbols">The symbols to subscribe</param>
            <param name="interval">Kline interval</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientSpotStreams.SubscribeToLeveragedTokenKlineUpdatesAsync(System.String,Bybit.Net.Enums.KlineInterval,System.Action{CryptoExchange.Net.Sockets.DataEvent{System.Collections.Generic.IEnumerable{Bybit.Net.Objects.Models.V5.BybitKlineUpdate}}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to leveraged token kline updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/etp-kline" /></para>
            </summary>
            <param name="symbol">The symbol to subscribe</param>
            <param name="interval">Kline interval</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientSpotStreams.SubscribeToLeveragedTokenNavUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitLeveragedTokenNav}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to leveraged token NAV updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/etp-nav" /></para>
            </summary>
            <param name="symbols">The symbols to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientSpotStreams.SubscribeToLeveragedTokenNavUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitLeveragedTokenNav}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to leveraged token NAV updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/etp-nav" /></para>
            </summary>
            <param name="symbol">The symbol to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientSpotStreams.SubscribeToLeveragedTokenTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitLeveragedTokenTicker}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to leveraged token ticker updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/etp-ticker" /></para>
            </summary>
            <param name="symbols">The symbols to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientSpotStreams.SubscribeToLeveragedTokenTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitLeveragedTokenTicker}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to leveraged token ticker updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/etp-ticker" /></para>
            </summary>
            <param name="symbol">The symbol to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientSpotStreams.SubscribeToTickerUpdatesAsync(System.Collections.Generic.IEnumerable{System.String},System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitSpotTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/ticker" /></para>
            </summary>
            <param name="symbols">The symbols to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="M:Bybit.Net.Interfaces.Clients.V5.IBybitSocketClientSpotStreams.SubscribeToTickerUpdatesAsync(System.String,System.Action{CryptoExchange.Net.Sockets.DataEvent{Bybit.Net.Objects.Models.V5.BybitSpotTickerUpdate}},System.Threading.CancellationToken)">
            <summary>
            Subscribe to ticker updates
            <para><a href="https://bybit-exchange.github.io/docs/v5/websocket/public/ticker" /></para>
            </summary>
            <param name="symbol">The symbol to subscribe</param>
            <param name="handler">Data handler</param>
            <param name="ct">Cancellation token. Cancelling will cancel the subscription</param>
            <returns></returns>
        </member>
        <member name="T:Bybit.Net.Objects.BybitApiAddresses">
            <summary>
            Api addresses usable for the Bybit clients
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.SpotRestClientAddress">
            <summary>
            The address used by the BybitClient for the Spot rest API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.SpotPublicSocketV1ClientAddress">
            <summary>
            The address used by the BybitSocketClient for the public Spot socket API v1
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.SpotPublicSocketV2ClientAddress">
            <summary>
            The address used by the BybitSocketClient for the public Spot socket API v2
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.SpotPublicSocketV3ClientAddress">
            <summary>
            The address used by the BybitSocketClient for the public Spot socket API v3
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.SpotPrivateSocketV1ClientAddress">
            <summary>
            The address used by the BybitSocketClient for the private Spot socket API v1
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.SpotPrivateSocketV3ClientAddress">
            <summary>
            The address used by the BybitSocketClient for the private Spot socket API v3
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.UsdPerpetualRestClientAddress">
            <summary>
            The address used by the BybitClient for the USD perpetual rest API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.UsdPerpetualPublicSocketClientAddress">
            <summary>
            The address used by the BybitSocketClient for the public USD perpetual socket API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.UsdPerpetualPrivateSocketClientAddress">
            <summary>
            The address used by the BybitSocketclient for the private USD perpetual socket API 
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.InversePerpetualRestClientAddress">
            <summary>
            The address used by the BybitClient for the Inverse perpetual rest API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.InversePerpetualSocketClientAddress">
            <summary>
            The address used by the BybitSocketClient for the Inverse perpetual socket API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.InverseFuturesRestClientAddress">
            <summary>
            The address used by the BybitClient for the Inverse futures rest API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.InverseFuturesSocketClientAddress">
            <summary>
            The address used by the BybitSocketClient for the Inverse futures socket API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.CopyTradingRestClientAddress">
            <summary>
            The address used by the BybitClient for the Copy Trading rest API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.CopyTradingSocketClientAddress">
            <summary>
            The address used by the BybitSocketClient for the Inverse futures socket API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.DerivativesRestClientAddress">
            <summary>
            The address used by the BybiClient for the Derivatives rest API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.DerivativesPublicUSDTContractSocketClientAddress">
            <summary>
            The address used by the BybitSocketClient for the public USDT contract Derivatives socket API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.DerivativesPublicUSDCContractSocketClientAddress">
            <summary>
            The address used by the BybitSocketClient for the public USDC contract Derivatives socket API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.DerivativesPublicUSDCOptionSocketClientAddress">
            <summary>
            The address used by the BybitSocketClient for the public USDC option Derivatives socket API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.DerivativesPublicInverseSocketClientAddress">
            <summary>
            The address used by the BybitSocketClient for the public Inverse Derivatives socket API
            </summary>
            <remarks> Now only for Contract </remarks>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.ContractPrivateSocketClientAddress">
            <summary>
            The address used by the BybitSocketClient for the private Contract socket API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.UnifiedMarginPrivateSocketClientAddress">
            <summary>
            The address used by the BybitSocketClient for the private Unified margin socket API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.V5PrivateSocketClientAddress">
            <summary>
            The address used by the BybitSocketClient for the V5 socket API
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitApiAddresses.V5PublicSocketClientAddress">
            <summary>
            The address used by the BybitSocketClient for the V5 socket API
            </summary>
        </member>
        <member name="F:Bybit.Net.Objects.BybitApiAddresses.Default">
            <summary>
            The default addresses to connect to the Bybit.com API
            </summary>
        </member>
        <member name="F:Bybit.Net.Objects.BybitApiAddresses.TestNet">
            <summary>
            The addresses to connect to the Bybit testnet
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.BybitClientOptions">
            <summary>
            Options for the Bybit client
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitClientOptions.Default">
            <summary>
            Default options for the Bybit client
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitClientOptions.Referer">
            <summary>
            A referer, will be sent in the x-referer header
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitClientOptions.ReceiveWindow">
            <summary>
            The default receive window for requests
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitClientOptions.InverseFuturesApiOptions">
            <summary>
            Inverse futures API options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitClientOptions.InversePerpetualApiOptions">
            <summary>
            Inverse perpetual API options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitClientOptions.UsdPerpetualApiOptions">
            <summary>
            Usd perpetual API options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitClientOptions.SpotApiOptions">
            <summary>
            Spot API options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitClientOptions.CopyTradingApiOptions">
            <summary>
            Copy trading API options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitClientOptions.DerivativesApiOptions">
            <summary>
            Copy trading API options
            </summary>
        </member>
        <member name="M:Bybit.Net.Objects.BybitClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Bybit.Net.Objects.BybitClientOptions.#ctor(Bybit.Net.Objects.BybitClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="baseOn">Base the new options on other options</param>
        </member>
        <member name="T:Bybit.Net.Objects.BybitSocketClientOptions">
            <summary>
            Options for the futures socket client
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketClientOptions.Default">
            <summary>
            Default options for the futures socket client
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketClientOptions.InverseFuturesStreamsOptions">
            <summary>
            Inverse futures streams options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketClientOptions.InversePerpetualStreamsOptions">
            <summary>
            Inverse perpetual streams options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketClientOptions.UsdPerpetualStreamsOptions">
            <summary>
            Usd perpetual streams options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketClientOptions.SpotStreamsV1Options">
            <summary>
            Spot streams options version 1
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketClientOptions.SpotStreamsV2Options">
            <summary>
            Spot streams options version 2
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketClientOptions.SpotStreamsV3Options">
            <summary>
            Spot streams options version 2
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketClientOptions.CopyTradingStreamsOptions">
            <summary>
            Copy trading streams options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketClientOptions.DerivativesPublicStreamsOptions">
            <summary>
            Unified margin streams options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketClientOptions.UnifiedMarginStreamsOptions">
            <summary>
            Unified margin streams options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketClientOptions.ContractStreamsOptions">
            <summary>
            Contract streams options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketClientOptions.V5StreamsOptions">
            <summary>
            V5 streams options
            </summary>
        </member>
        <member name="M:Bybit.Net.Objects.BybitSocketClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Bybit.Net.Objects.BybitSocketClientOptions.#ctor(Bybit.Net.Objects.BybitSocketClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="baseOn">Base the new options on other options</param>
        </member>
        <member name="T:Bybit.Net.Objects.BybitSocketApiClientOptions">
            <summary>
            Bybit socket API client options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketApiClientOptions.BaseAddressAuthenticated">
            <summary>
            The base address for the authenticated websocket
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSocketApiClientOptions.PingInterval">
            <summary>
            Interval at which to send a ping to the server
            </summary>
        </member>
        <member name="M:Bybit.Net.Objects.BybitSocketApiClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Bybit.Net.Objects.BybitSocketApiClientOptions.#ctor(Bybit.Net.Objects.BybitSocketApiClientOptions,Bybit.Net.Objects.BybitSocketApiClientOptions)">
            <summary>
            ctor
            </summary>
            <param name="baseOn"></param>
            <param name="newValues"></param>
        </member>
        <member name="M:Bybit.Net.Objects.BybitSocketApiClientOptions.#ctor(System.String,System.String)">
            <summary>
            ctor
            </summary>
            <param name="baseAddress"></param>
            <param name="baseAddressAuthenticated"></param>
        </member>
        <member name="T:Bybit.Net.Objects.BybitDerivativesSocketApiClientOptions">
            <summary>
            Socket options for UnifiedMargin account
            </summary>
        </member>
        <member name="M:Bybit.Net.Objects.BybitDerivativesSocketApiClientOptions.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.BybitSymbolOrderBookOptions">
            <summary>
            Options for the futures symbol order book
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSymbolOrderBookOptions.InitialDataTimeout">
            <summary>
            After how much time we should consider the connection dropped if no data is received for this time after the initial subscriptions
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSymbolOrderBookOptions.SocketClient">
            <summary>
            The client to use for the socket connection. When using the same client for multiple order books the connection can be shared.
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.BybitSymbolOrderBookOptions.Limit">
            <summary>
            The limit of entries in the order book, either 25 or 200
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Internal.BybitData`1">
            <summary>
            Data wrapper
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Bybit.Net.Objects.Internal.BybitData`1.Data">
            <summary>
            The data
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Internal.BybitCursorPage`1">
            <summary>
            Cursor paged data wrapper
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Bybit.Net.Objects.Internal.BybitCursorPage`1.Cursor">
            <summary>
            Cursor for requesting next/previous page
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Internal.BybitCursorPage`1.ResultTotalSize">
            <summary>
            Result total size
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Internal.BybitCursorPage`1.Currency">
            <summary>
            Currency
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Internal.BybitDerivativesCursorPage`1">
            <summary>
            Cursof paged data wrapper for unified margin
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Bybit.Net.Objects.Internal.BybitDerivativesCursorPage`1.Category">
            <summary>
            Type of derivatives product
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Internal.BybitPage`1">
            <summary>
            Cursor paged data wrapper
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Bybit.Net.Objects.Internal.BybitPage`1.CurrentPage">
            <summary>
            Current page
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Internal.BybitCategoryList`1.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Internal.BybitSymbolCategoryList`1.Symbol">
            <summary>
            Name of the trading pair
            </summary>
        </member>
        <member name="M:Bybit.Net.Objects.Internal.Socket.BybitSpotRequestMessageV1.ValidateResponse(Newtonsoft.Json.Linq.JToken,System.Boolean@)">
            <inheritdoc />
            <remarks>  Got fallback message only in version 2,3. In version 1 we get a plain responseData </remarks>
        </member>
        <member name="M:Bybit.Net.Objects.Internal.Socket.BybitSpotRequestMessageV1.MatchReponse(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Objects.Internal.Socket.BybitSpotRequestMessageV2.ValidateResponse(Newtonsoft.Json.Linq.JToken,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Objects.Internal.Socket.BybitSpotRequestMessageV2.MatchReponse(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Objects.Internal.Socket.BybitSpotRequestMessageV3.ValidateResponse(Newtonsoft.Json.Linq.JToken,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Bybit.Net.Objects.Internal.Socket.BybitSpotRequestMessageV3.MatchReponse(Newtonsoft.Json.Linq.JToken)">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Spot.BybitSocketEvent">
            <summary>
            Socket update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSocketEvent.Event">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSocketEvent.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotAccountUpdate">
            <summary>
            Account update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotAccountUpdate.AllowTrade">
            <summary>
            Allow trading
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotAccountUpdate.AllowWithdraw">
            <summary>
            Allow withdrawing
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotAccountUpdate.AllowDeposit">
            <summary>
            Allow deposits
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotAccountUpdate.Balances">
            <summary>
            Balances
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotAccountBalance">
            <summary>
            Account balance
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotAccountBalance.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotAccountBalance.Available">
            <summary>
            Available amount
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotAccountBalance.Locked">
            <summary>
            Locked in orders
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate">
            <summary>
            Kline data update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate.OpenTime">
            <summary>
            Candle open time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate.SymbolName">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotKlineUpdate.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotLeverageUpdate">
            <summary>
            Leverage Token Net value update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotLeverageUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotLeverageUpdate.Symbol">
            <summary>
            Symbol
            </summary>
            <remarks> Please make sure to add "NAV" as a suffix to the name of the pair you're querying </remarks>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotLeverageUpdate.NetAssetValue">
            <summary>
            Net asset value
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotLeverageUpdate.BasketValue">
            <summary>
            Basket value
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotLeverageUpdate.RealLeverage">
            <summary>
            Real Leverage calculated by last traded price.
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotLeverageUpdate.BasketLoan">
            <summary>
            Basket loan
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotLeverageUpdate.CirculatingSupply">
            <summary>
            Circulating supply in the secondary market
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotLeverageUpdate.TotalPositionValue">
            <summary>
            Total position value = basket value * total circulation
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate">
            <summary>
            Order book update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate.Asks">
            <summary>
            Asks
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderBookUpdate.Bids">
            <summary>
            Bids
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate">
            <summary>
            Spot order update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.MatchOrderId">
            <summary>
            Match order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.LastFilledQuantity">
            <summary>
            Last filled quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.TotalQuantityFilled">
            <summary>
            Total filled quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.LastTradePrice">
            <summary>
            Price of last filled quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.Fee">
            <summary>
            Fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.FeeAsset">
            <summary>
            Fee asset
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.IsNormal">
            <summary>
            Is normal
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.IsWorking">
            <summary>
            Is working
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.IsLimitMaker">
            <summary>
            Is limit maker
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.TotalValueFilled">
            <summary>
            Total value filled
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.MatchAccountId">
            <summary>
            Match account id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.IsClosed">
            <summary>
            Is closed
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotOrderUpdate.Leverage">
            <summary>
            Leverage
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate">
            <summary>
            Spot order update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.TriggeredTime">
            <summary>
            Triggered time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.MarketPrice">
            <summary>
            The market price when place the order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotStopOrderUpdate.NewOrderId">
            <summary>
            The new order id after the tp/sl order is triggered.
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate">
            <summary>
            Ticker info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate.Timestamp">
            <summary>
            Timestamp of the data
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate.ChangePercentage">
            <summary>
            Change percentage compared to 24 hours ago
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate.QuoteVolume">
            <summary>
            Quote volume
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate.LastPrice">
            <summary>
            Last trade price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate.HighPrice">
            <summary>
            24 hour high price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate.LowPrice">
            <summary>
            24 hour low price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTickerUpdate.OpenPrice">
            <summary>
            Price 24 hours ago
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTradeUpdate">
            <summary>
            Trade update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTradeUpdate.Id">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTradeUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTradeUpdate.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTradeUpdate.Quantity">
            <summary>
            Trade quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotTradeUpdate.Buy">
            <summary>
            Is buy
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate">
            <summary>
            Spot order update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate.TradeTime">
            <summary>
            Trade time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate.MatchOrderId">
            <summary>
            Matching order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate.AccountId">
            <summary>
            Account id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate.MatchAccountId">
            <summary>
            Matching account id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate.Maker">
            <summary>
            Is maker
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Spot.BybitSpotUserTradeUpdate.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitBalanceUpdate">
            <summary>
            Balance update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitBalanceUpdate.Asset">
            <summary>
            The asset
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitBalanceUpdate.WalletBalance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitBalanceUpdate.AvailableBalance">
            <summary>
            Available balance = wallet balance - used margin
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate`1">
            <summary>
            Delta update
            </summary>
            <typeparam name="T">Data type</typeparam>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate`1.Delete">
            <summary>
            Delete entries
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate`1.Update">
            <summary>
            Update entries
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitDeltaUpdate`1.Insert">
            <summary>
            Insert entries
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitGreeksUpdate">
            <summary>
            Greeks update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitGreeksUpdate.Asset">
            <summary>
            Base currency
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitGreeksUpdate.Delta">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitGreeksUpdate.Gamma">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitGreeksUpdate.Vega">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitGreeksUpdate.Theta">
            <summary>
            Close price
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitInsuranceUpdate">
            <summary>
            Insurance update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitInsuranceUpdate.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitInsuranceUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitInsuranceUpdate.WalletBalance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitKlineUpdate">
            <summary>
            Kline update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitKlineUpdate.OpenTime">
            <summary>
            Open time of the kline
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitKlineUpdate.CloseTime">
            <summary>
            Close time of the kline
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitKlineUpdate.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitKlineUpdate.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitKlineUpdate.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitKlineUpdate.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitKlineUpdate.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitKlineUpdate.Turnover">
            <summary>
            Turnover
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitKlineUpdate.Confirm">
            <summary>
            Is the final kline
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitKlineUpdate.CrossSequence">
            <summary>
            Cross sequence
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitKlineUpdate.Timestamp">
            <summary>
            Data timestamp
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate">
            <summary>
            Liquidation update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate.Symbol">
            <summary>
            The symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitLiquidationUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.Id">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.CreateType">
            <summary>
            Create type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.QuoteQuantityFilled">
            <summary>
            Quote quantity filled
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.BaseQuantityFilled">
            <summary>
            Base quantity filled
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.Fee">
            <summary>
            Fee paid
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.TakeProfit">
            <summary>
            Take profit price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.StopLoss">
            <summary>
            Stop loss price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.TrailingStop">
            <summary>
            Trailing stop
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.TrailingActive">
            <summary>
            Trailing stop active price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.LastTradePrice">
            <summary>
            Price of last fill
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.ReduceOnly">
            <summary>
            True means your position can only reduce in size if this order is triggered
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.CloseOnTrigger">
            <summary>
            For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin.
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitOrderUpdate.PositionMode">
            <summary>
            Position mode (only availaable on USD perpetual)
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitUsdPerpetualOrderUpdate">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUsdPerpetualOrderUpdate.QuoteQuantityFilled">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUsdPerpetualOrderUpdate.BaseQuantityFilled">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitInverseOrderUpdate">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitInverseOrderUpdate.QuoteQuantityFilled">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitInverseOrderUpdate.BaseQuantityFilled">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitPositionUpdate">
            <summary>
            Position update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUpdate.TakeProfitTriggerBy">
            <summary>
            Take profit trigger
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUpdate.StopLossTriggeredBy">
            <summary>
            Stop loss trigger
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUpdate.TrailingActive">
            <summary>
            Trailing stop trigger
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUpdate.PositionStatus">
            <summary>
            Position status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUpdate.ClosingFee">
            <summary>
            Position closing fee occupied (your opening fee + expected maximum closing fee)
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUpdate.OrderMargin">
            <summary>
            Pre-occupied order margin
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUpdate.WalletBalance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUpdate.AvailableBalance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUpdate.PositionSequence">
            <summary>
            Position sequence
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitPositionUsdPerpetualUpdate">
            <summary>
            Uds perpetual position update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUsdPerpetualUpdate.TakeProfitStopLossMode">
            <summary>
            Take profit trigger
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUsdPerpetualUpdate.Mode">
            <summary>
            Mode
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUsdPerpetualUpdate.Isolated">
            <summary>
            Is isolated
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUsdPerpetualUpdate.PositionId">
            <summary>
            Position id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUsdPerpetualUpdate.AdlRankIndicator">
            <summary>
            Adl indicator
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitPositionUsdPerpetualUpdate.FeeQuantity">
            <summary>
            Fee quantity
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitStopOrderUpdate">
            <summary>
            Stop order update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitStopOrderUpdate.Id">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitStopOrderUpdate.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitStopOrderUpdate.Status">
            <summary>
            Stop order status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitStopOrderUpdate.StopOrderType">
            <summary>
            Stop order type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitStopOrderUpdate.CreateType">
            <summary>
            Create type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitStopOrderUpdate.TriggerBy">
            <summary>
            Trigger price type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitStopOrderUpdate.TriggerPrice">
            <summary>
            Trigger rpice. If stop_order_type is TrailingProfit, this field is the trailing stop active price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitStopOrderUpdate.CloseOnTrigger">
            <summary>
            For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin.
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitStopOrderUpdate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitUsdPerpetualStopOrderUpdate">
            <summary>
            Usd perpetual order update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUsdPerpetualStopOrderUpdate.ReduceOnly">
            <summary>
            Reduce only
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUsdPerpetualStopOrderUpdate.PositionMode">
            <summary>
            Position mode
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate">
            <summary>
            Ticker update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.LastTickDirection">
            <summary>
            Direction of price change
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.PriceChangePercentage24H">
            <summary>
            24 hour price change percentage
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.PriceChangePercentage1H">
            <summary>
            1 hour price change percentage
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.LastPrice">
            <summary>
            Last trade price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.Price24H">
            <summary>
            Price 24 hours ago
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.HighPrice24H">
            <summary>
            High price in the last 24 hours
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.LowPrice24H">
            <summary>
            Low price in the last 24 hours
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.Price1H">
            <summary>
            Price 1 hour ago
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.OpenInterest">
            <summary>
            Open interest
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.OpenValue">
            <summary>
            Open value
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.TotalTurnover">
            <summary>
            Total turnover
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.Turnover24H">
            <summary>
            24 hour turnover
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.TotalVolume">
            <summary>
            Total volume
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.Volume24H">
            <summary>
            24 hour volume
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.PredictedFundingRate">
            <summary>
            Predicted funding rate
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.CrossSequence">
            <summary>
            Cross sequence
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.NextFundingTime">
            <summary>
            Next funding time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.CountdownHour">
            <summary>
            Countdown hour
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.BestAskPrice">
            <summary>
            Best ask price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.BestBidPrice">
            <summary>
            Best bid price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.FundingRate">
            <summary>
            Funding rate
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTickerUpdate.FundingRateInterval">
            <summary>
            Funding rate interval in hours
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitTradeUpdate">
            <summary>
            Trade update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTradeUpdate.Timestamp">
            <summary>
            Update timestamp
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTradeUpdate.TradeTime">
            <summary>
            Trade time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTradeUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTradeUpdate.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTradeUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTradeUpdate.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTradeUpdate.TickDirection">
            <summary>
            Tick direction
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTradeUpdate.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitTradeUpdate.CrossSequence">
            <summary>
            Cross sequence
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate">
            <summary>
            User trade info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate.OrderId">
            <summary>
            The order id the trade was for
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate.Id">
            <summary>
            The trade id 
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate.ClientOrderId">
            <summary>
            The client order id the trade was for
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate.Price">
            <summary>
            The trade price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate.OrderQuantity">
            <summary>
            Quantity of the order the trade was for
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate.Quantity">
            <summary>
            The traded quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate.Type">
            <summary>
            Trade type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate.Fee">
            <summary>
            Fee paid for the trade
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate.QuantityRemaining">
            <summary>
            Remaining quantity in order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate.IsMaker">
            <summary>
            Is maker
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.BybitUserTradeUpdate.TradeTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesKlineUpdate">
            <summary>
            Kline update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesKlineUpdate.Interval">
            <summary>
            Data refresh interval
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate">
            <summary>
            Base class for position update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.PositionMode">
            <summary>
            Position mode
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.RiskId">
            <summary>
            Risk id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.PositionStatus">
            <summary>
            Position status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.PositionValue">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.EntryPrice">
            <summary>
            Average entry price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.SettlementPrice">
            <summary>
            Settlement price, for USDC only
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.TotalRealizedPnl">
            <summary>
            Accumulated realized pnl (all-time total)
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.Leverage">
            <summary>
            Under the isolated margin mode, the value should be the leverage set by the user. Under the cross margin mode, the value should be the maximum leverage under the current risk limit. For contracts only, and not for options
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.TakeProfit">
            <summary>
            Take profit price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.StopLoss">
            <summary>
            Stop loss price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.TrailingStop">
            <summary>
            Trailing stop
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.UnrealisedPnl">
            <summary>
            Unrealized PnL
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.InitialMargin">
            <summary>
            Position Initial margin
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.MaintenanceMargin">
            <summary>
            Position Maintenance margin
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.CreateTime">
            <summary>
            Creation time of the order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesPositionUpdate.UpdateTime">
            <summary>
            Last update time
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate">
            <summary>
            Derivatives ticker update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate.TickDirection">
            <summary>
            Price change direction
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate.PriceChangePercentage24H">
            <summary>
            Price change percentage since 24 hours ago
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate.LastPrice">
            <summary>
            Last trade price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate.Turnover24H">
            <summary>
            Turnover in the last 24 hours
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate.Volume24H">
            <summary>
            Volume in the last 24 hours
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate.FundingRate">
            <summary>
            Funding rate
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate.NextFundingTime">
            <summary>
            Next settlement time of capital cost
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate.Bid1Price">
            <summary>
            Bid 1 price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate.Bid1Size">
            <summary>
            Bid 1 size
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate.Ask1Price">
            <summary>
            Ask 1 price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTickerUpdate.Ask1Size">
            <summary>
            Ask 1 size
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate">
            <summary>
            Trade update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate.Timestamp">
            <summary>
            Update timestamp
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate.TradeTime">
            <summary>
            The time that the order is filled
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate.TickDirection">
            <summary>
            Tick direction
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesTradeUpdate.IsBlockTrade">
            <summary>
            Tick direction
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate">
            <summary>
            Base class for user trade updates
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.TradingId">
            <summary>
            Trading id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.AccumulativeTradingVolume">
            <summary>
            Trading volume
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.TradingValue">
            <summary>
            Trading value
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.TradingFee">
            <summary>
            Trading fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.TradingPrice">
            <summary>
            Trading price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.FeeRate">
            <summary>
            Fee rate
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.OrderPrice">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.OrderQuantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.TradingTime">
            <summary>
            Time of trade
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.ConditionalOrderType">
            <summary>
            Conditional order type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.TradeType">
            <summary>
            Trade type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.LiquidityType">
            <summary>
            Liquidity type enum, only valid when the exec_type field type is Trade, AdlTrade, or BustTrade.
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.BybitDerivativesUserTradeUpdate.RemainingOrderQuantity">
            <summary>
            Remaining order quantity
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractBalanceUpdate">
            <summary>
            Balance update info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractBalanceUpdate.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractBalanceUpdate.Equity">
            <summary>
            Equity, wallet balance + unrealized pnl
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractBalanceUpdate.WalletBalance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractBalanceUpdate.PositionMargin">
            <summary>
            Position margin
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractBalanceUpdate.AvailableBalance">
            <summary>
            Available balance
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractBalanceUpdate.OrderMargin">
            <summary>
            Used margin by order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractBalanceUpdate.UnrealisedPnl">
            <summary>
            Unrealized profit and loss
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractBalanceUpdate.TotalRealizedPnl">
            <summary>
            Total realized profit and loss
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractOrderUpdate">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractOrderUpdate.ClosedSize">
            <summary>
            Quantity to close
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractOrderUpdate.TradeTime">
            <summary>
            Time of trade (unit: ms)
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractOrderUpdate.FilledPrice">
            <summary>
            Filled price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractOrderUpdate.FilledQuantity">
            <summary>
            When the order is filled or partially filled, it is filled qty. When the order is canceled, it is unfilled qty.
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractPositionUpdate">
            <summary>
            Position update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractPositionUpdate.PositionBalance">
            <summary>
            Position balance
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractPositionUpdate.RiskLimitValue">
            <summary>
            Position upper limit corresponding to the current risk limit ID
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractPositionUpdate.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractPositionUpdate.BankruptcyPrice">
            <summary>
            Bankruptcy price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractPositionUpdate.ActivePrice">
            <summary>
            Trailing stop trigger price. Trailing stop will only be triggered when this price is touched (trailing stop will be immediately triggered by default).
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractPositionUpdate.ClosingFee">
            <summary>
            Position closing fee occupied (your opening fee + expected maximum closing fee)
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractPositionUpdate.AutoAddMargin">
            <summary>
            Whether to add margin automatically
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractPositionUpdate.TradeMode">
            <summary>
            Trade mode
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractPositionUpdate.StopMode">
            <summary>
            Stop loss and take profit mode
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractUserTradeUpdate">
            <summary>
            Trade update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.Contract.BybitContractUserTradeUpdate.ClosedSize">
            <summary>
            Quantity to close
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Derivatives.UnifiedMargin.BybitUnifiedMarginOrderUpdate">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.UnifiedMargin.BybitUnifiedMarginOrderUpdate.TriggerType">
            <summary>
            Type of trigger price, latest market price by default.
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.Socket.Derivatives.UnifiedMargin.BybitUnifiedMarginPositionUpdate">
            <summary>
            Position update
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.UnifiedMargin.BybitUnifiedMarginPositionUpdate.PositionMargin">
            <summary>
            Position margin
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.UnifiedMargin.BybitUnifiedMarginPositionUpdate.SessionUPL">
            <summary>
            Session UPL, for USDC only
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.UnifiedMargin.BybitUnifiedMarginPositionUpdate.SessionRPL">
            <summary>
            Session RPL, for USDC only
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.UnifiedMargin.BybitUnifiedMarginPositionUpdate.IsIsolated">
            <summary>
            Is isolated
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.Socket.Derivatives.UnifiedMargin.BybitUnifiedMarginPositionUpdate.StopMode">
            <summary>
            Stop loss and take profit mode
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitAccountRatio">
            <summary>
            Long/short account ratio
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAccountRatio.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAccountRatio.BuyRatio">
            <summary>
            Buy ratio
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAccountRatio.SellRatio">
            <summary>
            Sell ratio
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAccountRatio.Timestamp">
            <summary>
            Data timestamp
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitAnnouncement">
            <summary>
            Announcement
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAnnouncement.Id">
            <summary>
            Announcement id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAnnouncement.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAnnouncement.Link">
            <summary>
            Link
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAnnouncement.Summary">
            <summary>
            Summary
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAnnouncement.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.ByBitApiKeyInfo">
            <summary>
            Api key info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.ByBitApiKeyInfo.Apikey">
            <summary>
            The api key
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.ByBitApiKeyInfo.Type">
            <summary>
            Type of key
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.ByBitApiKeyInfo.UserId">
            <summary>
            User id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.ByBitApiKeyInfo.InviterId">
            <summary>
            Inviter id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.ByBitApiKeyInfo.IpWhitelist">
            <summary>
            IP whitelist
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.ByBitApiKeyInfo.Note">
            <summary>
            Notes
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.ByBitApiKeyInfo.Permissions">
            <summary>
            Key permissions
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.ByBitApiKeyInfo.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.ByBitApiKeyInfo.ExpireTime">
            <summary>
            Expiry time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.ByBitApiKeyInfo.Readonly">
            <summary>
            Is readonly key
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.ByBitApiKeyInfo.VipLevel">
            <summary>
            Vip Level
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.ByBitApiKeyInfo.MarketMakerLevel">
            <summary>
            Market Maker Level
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.ByBitApiKeyInfo.AffiliateId">
            <summary>
            Affiliate Id
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitAssetInfo">
            <summary>
            Asset information
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAssetInfo.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAssetInfo.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAssetInfo.RemainingWithdrawableQuantity">
            <summary>
            Withdrawable quantity remaining
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAssetInfo.Networks">
            <summary>
            Networks info
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitAssetNetwork">
            <summary>
            Network info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAssetNetwork.NetworkType">
            <summary>
            Network type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAssetNetwork.ConfirmationsNeeded">
            <summary>
            Number of confirmations needed for deposit
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAssetNetwork.WithdrawFee">
            <summary>
            Withdrawal fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAssetNetwork.MinimalDeposit">
            <summary>
            Deposit fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAssetNetwork.MinimalWithdrawal">
            <summary>
            Minimal withdrawal amount
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitAssetNetwork.Network">
            <summary>
            Network name
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitBalance">
            <summary>
            Balance info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBalance.Equity">
            <summary>
            Equity, wallet balance + unrealized pnl
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBalance.AvailableBalance">
            <summary>
            Available balance
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBalance.UsedMargin">
            <summary>
            Used margin, wallet balance - available balance
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBalance.OrderMargin">
            <summary>
            Used margin by order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBalance.PositionMargin">
            <summary>
            Position margin
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBalance.PositionClosingFee">
            <summary>
            Position closing fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBalance.FundingFee">
            <summary>
            Funding fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBalance.WalletBalance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBalance.RealizedPnl">
            <summary>
            Daily realized profit and loss
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBalance.UnrealizedPnl">
            <summary>
            Unrealized profit and loss
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBalance.TotalRealizedPnl">
            <summary>
            Total realized profit and loss
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBalance.GivenCash">
            <summary>
            Given cash
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBalance.ServiceCash">
            <summary>
            Service cash
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitBigTrade">
            <summary>
            Big trade info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBigTrade.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBigTrade.Value">
            <summary>
            Trade value
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBigTrade.Side">
            <summary>
            Side of the trade
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitBigTrade.Timestamp">
            <summary>
            Timestamp of the trade
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitCanceledConditionalOrder">
            <summary>
            Canceled order info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledConditionalOrder.Id">
            <summary>
            Cancel order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledConditionalOrder.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledConditionalOrder.CrossStatus">
            <summary>
            The state of initiating a matchmaking request
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledConditionalOrder.CreateType">
            <summary>
            Trigger scenario for single action
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledConditionalOrder.CrossSequence">
            <summary>
            Cross sequence
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledConditionalOrder.StopOrderType">
            <summary>
            Stop order type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledConditionalOrder.TriggerType">
            <summary>
            Trigger type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledConditionalOrder.BasePrice">
            <summary>
            Base price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledConditionalOrder.ExpectedDirection">
            <summary>
            Expected direction
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitCanceledOrder">
            <summary>
            Canceled order info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledOrder.Id">
            <summary>
            Cancel order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledOrder.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledOrder.CrossStatus">
            <summary>
            The state of initiating a matchmaking request
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledOrder.CreateType">
            <summary>
            Trigger scenario for single action
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitCanceledOrder.CrossSequence">
            <summary>
            Cross sequence
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitConditionalOrder">
            <summary>
            Conditional order info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.Id">
            <summary>
            Stop order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.Remark">
            <summary>
            Remark
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.StopPrice">
            <summary>
            Stop price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.BasePrice">
            <summary>
            Base price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.RejectReason">
            <summary>
            Reason for reject
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.StopOrderType">
            <summary>
            Type of the stop order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.Status">
            <summary>
            Stop order status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.QuoteQuantityFilled">
            <summary>
            Quote quantity filled
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.BaseQuantityFilled">
            <summary>
            Base quantity filled
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.Fee">
            <summary>
            Fee paid
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.TriggerType">
            <summary>
            Trigger type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.TakeProfitTriggerType">
            <summary>
            Trigger type for take profit
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.StopLossTriggerType">
            <summary>
            Trigger type for stop loss
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.TakeProfitPrice">
            <summary>
            Take profit price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.StopLossPrice">
            <summary>
            Stop loss price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.TriggerPrice">
            <summary>
            Trigger price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.ReduceOnly">
            <summary>
            Reduce only
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrder.PositionMode">
            <summary>
            Position mode
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitConditionalOrderUsd">
            <summary>
            Conditional order info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrderUsd.Id">
            <summary>
            Stop order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrderUsd.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrderUsd.BasePrice">
            <summary>
            Base price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrderUsd.Status">
            <summary>
            Stop order status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrderUsd.TriggerType">
            <summary>
            Trigger type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrderUsd.TakeProfitTriggerType">
            <summary>
            Take profit trigger type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrderUsd.StopLossTriggerType">
            <summary>
            Stop loss trigger type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrderUsd.ReduceOnly">
            <summary>
            True means close order, false means open position
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrderUsd.CloseOnTrigger">
            <summary>
            Is close on trigger order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrderUsd.TakeProfitPrice">
            <summary>
            Take profit price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrderUsd.StopLossPrice">
            <summary>
            Stop loss price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitConditionalOrderUsd.TriggerPrice">
            <summary>
            Trigger price
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitDeposit">
            <summary>
            Deposit info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDeposit.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDeposit.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDeposit.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDeposit.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDeposit.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDeposit.ToAddress">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDeposit.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDeposit.DepositFee">
            <summary>
            Deposit fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDeposit.SuccessTime">
            <summary>
            Success time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDeposit.Confirmations">
            <summary>
            Number of confirmations
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDeposit.TransactionIndex">
            <summary>
            Transaction sequence number
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDeposit.BlockHash">
            <summary>
            Hash number on the chain
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitDepositAddress">
            <summary>
            Deposit address info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDepositAddress.Asset">
            <summary>
            The asset 
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDepositAddress.Networks">
            <summary>
            Available network adresses
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitNetworkDepositAddress">
            <summary>
            Deposit address on a network
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitNetworkDepositAddress.NetworkType">
            <summary>
            Network type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitNetworkDepositAddress.Address">
            <summary>
            Deposit address
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitNetworkDepositAddress.DepositTag">
            <summary>
            Tag to use for deposit
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitNetworkDepositAddress.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitDepositConfig">
            <summary>
            Deposit config
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDepositConfig.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDepositConfig.Network">
            <summary>
            Chain
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDepositConfig.AssetName">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDepositConfig.NetworkType">
            <summary>
            Chain type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDepositConfig.ConfirmationsNeeded">
            <summary>
            Number of confirmations needed
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitDepositConfig.MinDepositQuantity">
            <summary>
            Min deposit quantity
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitExchangeHistoryEntry">
            <summary>
            Asset exchange history info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitExchangeHistoryEntry.Id">
            <summary>
            Exchange id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitExchangeHistoryEntry.ExchangeRate">
            <summary>
            Exchange rate
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitExchangeHistoryEntry.FromAsset">
            <summary>
            From asset
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitExchangeHistoryEntry.FromQuantity">
            <summary>
            From quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitExchangeHistoryEntry.FromFee">
            <summary>
            From fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitExchangeHistoryEntry.ToAsset">
            <summary>
            To asset
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitExchangeHistoryEntry.ToQuantity">
            <summary>
            To quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitExchangeHistoryEntry.CreateTime">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitFundingRate">
            <summary>
            Funding rate info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitFundingRate.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitFundingRate.FundingRate">
            <summary>
            Funding rate
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitFundingRate.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitFundingSettlement">
            <summary>
            Funding settlement info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitFundingSettlement.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitFundingSettlement.Side">
            <summary>
            Position side at the time of settlement
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitFundingSettlement.Quantity">
            <summary>
            Position size at the time of settlement
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitFundingSettlement.FundingRate">
            <summary>
            Funding rate for settlement
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitFundingSettlement.FundingFee">
            <summary>
            Funding fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitFundingSettlement.Timestamp">
            <summary>
            Funding settlement time
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitGeneralAccountStatus">
            <summary>
            Account status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitGeneralAccountStatus.Status">
            <summary>
            Account status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitGeneralAccountStatus.Assets">
            <summary>
            Asset infos
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitGeneralAssetInfo">
            <summary>
            Asset info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitGeneralAssetInfo.Asset">
            <summary>
            Asset name
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitGeneralAssetInfo.Free">
            <summary>
            Free amount
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitGeneralAssetInfo.Frozen">
            <summary>
            Frozen amount
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitGeneralAssetInfo.Withdraw">
            <summary>
            temporarily ""
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitId.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitIndexPriceKline">
            <summary>
            Kline info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitIndexPriceKline.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitIndexPriceKline.Period">
            <summary>
            Data recording period
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitKline">
            <summary>
            Kline info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitKline.Interval">
            <summary>
            Interval of the kline
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitKline.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitKline.Volume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitKline.Turnover">
            <summary>
            Turnover
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitKlineBase">
            <summary>
            Kline info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitKlineBase.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitKlineBase.OpenPrice">
            <summary>
            Open price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitKlineBase.HighPrice">
            <summary>
            High price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitKlineBase.LowPrice">
            <summary>
            Low price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitKlineBase.ClosePrice">
            <summary>
            Close price
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitMarginResult">
            <summary>
            Margin result
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginResult.Position">
            <summary>
            Position info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginResult.WalletBalance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginResult.AvailableBalance">
            <summary>
            Available balance = wallet balance - used margin
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitMarginPositionInfo">
            <summary>
            Position info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.UserId">
            <summary>
            User id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.Quantity">
            <summary>
            Position quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.PositionValue">
            <summary>
            Current position value
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.EntryPrice">
            <summary>
            Average opening price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.BankruptcyPrice">
            <summary>
            Bust price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.Leverage">
            <summary>
            In Isolated Margin mode, the value is set by user. In Cross Margin mode, the value is the max leverage at current risk level
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.PositionMargin">
            <summary>
            Position margin
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.ClosingFee">
            <summary>
            Pre-occupancy closing fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.RealizedPnl">
            <summary>
            Today's realized Profit and Loss
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.TotalRealizedPnl">
            <summary>
            Cumulative realized Profit and Loss
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarginPositionInfo.FreeQuantity">
            <summary>
            Quantity which can be closed
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitMarkPriceKline">
            <summary>
            Kline info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarkPriceKline.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarkPriceKline.OpenTime">
            <summary>
            Open time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitMarkPriceKline.Period">
            <summary>
            Data recording period
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitOpenInterest">
            <summary>
            Open interest info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOpenInterest.OpenInterest">
            <summary>
            Open interest value
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOpenInterest.Timestamp">
            <summary>
            Date timestamp
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOpenInterest.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitOrder">
            <summary>
            Order info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.Id">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.Status">
            <summary>
            Order status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.LastTradeTime">
            <summary>
            Time of last fill
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.LastTradePrice">
            <summary>
            Price of last fill
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.QuoteQuantityFilled">
            <summary>
            Quote quantity filled
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.BaseQuantityFilled">
            <summary>
            Base quantity filled
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.Fee">
            <summary>
            Fee paid
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.RejectReason">
            <summary>
            Reason for reject
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.TakeProfit">
            <summary>
            Take profit price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.StopLoss">
            <summary>
            Stop loss price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.TakeProfitTriggerType">
            <summary>
            Take profit trigger type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.StopLossTriggerType">
            <summary>
            Stop loss trigger type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.ReduceOnly">
            <summary>
            True means close order, false means open position
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrder.CloseOnTrigger">
            <summary>
            Is close on trigger order
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitUsdPerpetualOrder">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUsdPerpetualOrder.QuoteQuantityFilled">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUsdPerpetualOrder.BaseQuantityFilled">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitInverseOrder">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitInverseOrder.QuoteQuantityFilled">
            <inheritdoc />
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitInverseOrder.BaseQuantityFilled">
            <inheritdoc />
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitOrderBase">
            <summary>
            Order data
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBase.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBase.UserId">
            <summary>
            User id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBase.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBase.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBase.Type">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBase.Price">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBase.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBase.TimeInForce">
            <summary>
            Time in force
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBase.LeavesValue">
            <summary>
            The estimated value corresponding to the number of remaining orders
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBase.LeavesQuantity">
            <summary>
            Number of unfilled contracts from the order's size
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBase.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBase.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBase.CancelType">
            <summary>
            Trigger scenario for cancel operation
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitOrderBookEntry">
            <summary>
            Order book entry
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBookEntry.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBookEntry.Price">
            <summary>
            Price of the entry
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBookEntry.Quantity">
            <summary>
            Quantity of the entry
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderBookEntry.Side">
            <summary>
            Side of the entry
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitOrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitOrderId.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitPnlEntry">
            <summary>
            Profit and loss entry
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.Id">
            <summary>
            Position id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.UserId">
            <summary>
            User id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.Side">
            <summary>
            Order side
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.Quantity">
            <summary>
            Order quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.OrderPrice">
            <summary>
            Order price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.OrderType">
            <summary>
            Order type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.Type">
            <summary>
            Trade type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.ClosedQuantity">
            <summary>
            The corresponding closing size of the closing order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.TotalEntryValue">
            <summary>
            Closed position value
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.AverageEntryPrice">
            <summary>
            Average entry price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.TotalExitValue">
            <summary>
            Cumulative trading value of position closing orders
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.AverageExitPrice">
            <summary>
            Average exit price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.ClosedPnl">
            <summary>
            Closed Profit and Loss
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.Fills">
            <summary>
            The number of fills in a single order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.Leverage">
            <summary>
            In Isolated Margin mode, the value is set by user. In Cross Margin mode, the value is the max leverage at current risk level
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPnlEntry.CreateTime">
            <summary>
            Creation time
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitPosition">
            <summary>
            Position info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.IsValid">
            <summary>
            Whether the current data is valid. Only use data when IsValid is true
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.IsIsolated">
            <summary>
            Isolated margin mode
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.EffectiveLeverage">
            <summary>
            Effective leverage
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.DeleverageIndicator">
            <summary>
            Deleverage indicator level (1,2,3,4,5)
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.PositionStatus">
            <summary>
            Position status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.UnrealizedPnl">
            <summary>
            Unrealized pnl
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.CrossSequence">
            <summary>
            Cross sequence
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.CreateTime">
            <summary>
            The account creation time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.StopMode">
            <summary>
            Stop loss and take profit mode
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.ClosingFee">
            <summary>
            Position closing fee occupied (your opening fee + expected maximum closing fee)
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.OrderMargin">
            <summary>
            Pre-occupied order margin
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.WalletBalance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.PositionSequence">
            <summary>
            Position sequence
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPosition.AccumulatedFee">
            <summary>
            Accumelated fee
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitPositionBase">
            <summary>
            Position info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.UserId">
            <summary>
            User id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.RiskId">
            <summary>
            Risk id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.Side">
            <summary>
            Side
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.PositionValue">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.EntryPrice">
            <summary>
            Average entry price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.Leverage">
            <summary>
            In Isolated Margin mode, the value is set by user. In Cross Margin mode, the value is the max leverage at current risk level
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.PositionMargin">
            <summary>
            Position margin
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.LiquidationPrice">
            <summary>
            Liquidation price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.BankruptcyPrice">
            <summary>
            Bankruptcy price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.FundingFee">
            <summary>
            Pre-occupied funding fee: calculated from position qty and current funding fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.TakeProfit">
            <summary>
            Take profit price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.StopLoss">
            <summary>
            Stop loss price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.TrailingStop">
            <summary>
            Trailing stop
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.AutoAddMargin">
            <summary>
            Whether to add margin automatically
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.RealizedPnl">
            <summary>
            Today's realized pnl
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.TotalRealizedPnl">
            <summary>
            Accumulated realized pnl (all-time total)
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionBase.PositionMode">
            <summary>
            Position mode
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitPositionUsd">
            <summary>
            Position info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionUsd.IsValid">
            <summary>
            Whether the current data is valid. Only use data when IsValid is true
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionUsd.IsIsolated">
            <summary>
            Is isolated margin mode
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionUsd.FreeQuantity">
            <summary>
            Quantity which can be closed
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionUsd.StopLossTakeProfitMode">
            <summary>
            Stop loss and take profit mode
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionUsd.UnrealizedPnl">
            <summary>
            Unrealized profit and loss
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionUsd.DeleverageIndicator">
            <summary>
            Deleverage indicator level (1,2,3,4,5)
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPositionUsd.ClosingFee">
            <summary>
            Pre-occupancy closing fee
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitPredictedFunding">
            <summary>
            Predicted funding rate and fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPredictedFunding.PredictedFundingRate">
            <summary>
            Predicted funding rate
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPredictedFunding.PredictedFundingFee">
            <summary>
            Predicted funding fee
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitRiskId">
            <summary>
            Risk id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitRiskId.RiskId">
            <summary>
            Risk id
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitRiskLimit">
            <summary>
            Risk limit info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitRiskLimit.Id">
            <summary>
            Risk id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitRiskLimit.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitRiskLimit.Limit">
            <summary>
            Risk limit
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitRiskLimit.MaintainMargin">
            <summary>
            Maintain margin
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitRiskLimit.StartingMargin">
            <summary>
            Starting margin
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitRiskLimit.Section">
            <summary>
            Section
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitRiskLimit.IsLowestRisk">
            <summary>
            Is lowest risk
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitRiskLimit.CreateTime">
            <summary>
            Create time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitRiskLimit.UpdateTime">
            <summary>
            Update time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitRiskLimit.MaxLeverage">
            <summary>
            Max leverage
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitStopOrderId">
            <summary>
            Stop order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitStopOrderId.StopOrderId">
            <summary>
            Stop order id
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitSubAccountList">
            <summary>
            Sub account list
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSubAccountList.SubAccountIds">
            <summary>
            Sub account ids
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitSymbol">
            <summary>
            Symbol info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSymbol.Name">
            <summary>
            Symbol name
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSymbol.Alias">
            <summary>
            Alias
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSymbol.Status">
            <summary>
            Symbol status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSymbol.BaseCurrency">
            <summary>
            Base currency of the symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSymbol.QuoteCurrency">
            <summary>
            Quote currency of the symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSymbol.PricePrecision">
            <summary>
            Price precision (amount of decimals)
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSymbol.TakerFee">
            <summary>
            Taker fee rate
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSymbol.MakerFee">
            <summary>
            Maker fee rate
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSymbol.LeverageFilter">
            <summary>
            Leverage filter
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSymbol.PriceFilter">
            <summary>
            Price filter
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSymbol.LotSizeFilter">
            <summary>
            Lot size filter
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitLeverageFilter">
            <summary>
            Leverage rules
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitLeverageFilter.MinLeverage">
            <summary>
            Minimal leverage
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitLeverageFilter.MaxLeverage">
            <summary>
            Maximum leverage
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitLeverageFilter.LeverageStep">
            <summary>
            Leverage step
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitPriceFilter">
            <summary>
            Price rules
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPriceFilter.MinPrice">
            <summary>
            Minimal price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPriceFilter.MaxPrice">
            <summary>
            Maximum price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitPriceFilter.TickSize">
            <summary>
            Tick size
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitLotSizeFilter">
            <summary>
            Lot size rules
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitLotSizeFilter.MinQuantity">
            <summary>
            Minimal quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitLotSizeFilter.MaxQuantity">
            <summary>
            Maximum quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitLotSizeFilter.QuantityStep">
            <summary>
            Quantity step
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitTicker">
            <summary>
            Ticker
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.BestBidPrice">
            <summary>
            Best bid price available
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.BestAskPrice">
            <summary>
            Best ask price available
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.LastPrice">
            <summary>
            Last trade price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.LastTickDirection">
            <summary>
            Price change direction
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.Price24H">
            <summary>
            Price 24 hours ago
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.PriceChangePercentage24H">
            <summary>
            Price change percentage since 24 hours ago
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.HighPrice24H">
            <summary>
            High price in the last 24 hours
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.LowPrice24H">
            <summary>
            Low price in the last 24 hours
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.Price1H">
            <summary>
            Pirce 1 hour ago
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.PriceChangePercentage1H">
            <summary>
            Price change percentage since 1 hour ago
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.MarkPrice">
            <summary>
            Mark price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.IndexPrice">
            <summary>
            Index price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.OpenInterest">
            <summary>
            Open interest
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.OpenValue">
            <summary>
            Open position value
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.TotalTurnover">
            <summary>
            Total turnover
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.Turnover24H">
            <summary>
            Turnover in the last 24 hours
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.TotalVolume">
            <summary>
            Total volume
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.Volume24H">
            <summary>
            Volume in the last 24 hours
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.FundingRate">
            <summary>
            Funding rate
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.PredictedFundingRate">
            <summary>
            Predicted funding rate
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.NextFundingTime">
            <summary>
            Next settlement time of capital cost
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.CountdownHour">
            <summary>
            Countdown of settlemnt capital cost
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.DeliveryFeeRate">
            <summary>
            Delivery fee rate of futures contract
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.PredictedDeliveryPrice">
            <summary>
            Predicted delivery price of futures contract
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTicker.DeliveryTime">
            <summary>
            Delivery time of futures contract
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitTpSlMode">
            <summary>
            Mode info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTpSlMode.Mode">
            <summary>
            New mode
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitTrade">
            <summary>
            Trade info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTrade.Id">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTrade.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTrade.Price">
            <summary>
            Trade price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTrade.Quantity">
            <summary>
            Trade quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTrade.Side">
            <summary>
            Side of the trade
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTrade.Timestamp">
            <summary>
            Timestamp of the trade
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitTransfer">
            <summary>
            Transfer id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTransfer.TransferId">
            <summary>
            Transfer id
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitTransferDetails">
            <summary>
            Transfer details
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTransferDetails.TransferId">
            <summary>
            Transfer id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTransferDetails.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTransferDetails.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTransferDetails.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTransferDetails.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitInternalTransferDetails">
            <summary>
            Transfer details
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitInternalTransferDetails.FromAccountType">
            <summary>
            From account type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitInternalTransferDetails.ToAccountType">
            <summary>
            To account type
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitSubAccountTransferDetails">
            <summary>
            Sub account transfer details
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSubAccountTransferDetails.UserId">
            <summary>
            User id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSubAccountTransferDetails.SubAccountId">
            <summary>
            Sub account id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitSubAccountTransferDetails.Type">
            <summary>
            Type
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitTransferId">
            <summary>
            Transfer id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitTransferId.TransferId">
            <summary>
            Transfer id
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitUniversalTransfer">
            <summary>
            Universal transfer info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUniversalTransfer.TransferId">
            <summary>
            Tranfer id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUniversalTransfer.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUniversalTransfer.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUniversalTransfer.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUniversalTransfer.FromAccountType">
            <summary>
            From account type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUniversalTransfer.ToAccountType">
            <summary>
            To account type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUniversalTransfer.FromMemberId">
            <summary>
            From member id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUniversalTransfer.ToMemberId">
            <summary>
            To member id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUniversalTransfer.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitUserTrade">
            <summary>
            User trade info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.ClosedQuantity">
            <summary>
            The corresponding closing size of the closing order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.CrossSequence">
            <summary>
            Cross sequence
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.Fee">
            <summary>
            Transaction fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.Id">
            <summary>
            Trade id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.Price">
            <summary>
            Price
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.Type">
            <summary>
            Trade type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.Value">
            <summary>
            Value of trade
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.FeeRate">
            <summary>
            Maker or taker fee rate
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.Liquidity">
            <summary>
            Liquiditry, only valid while Type is Trade, AdlTrade, BustTrade
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.QuantityRemaining">
            <summary>
            Remaining quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.FillNumber">
            <summary>
            The sequence of the transaction in this cross sequence data package
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.OrderId">
            <summary>
            Order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.ClientOrderId">
            <summary>
            Client order id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.OrderPrice">
            <summary>
            Price of the order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.OrderQuantity">
            <summary>
            Quantity of the order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.Symbol">
            <summary>
            Symbol
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.OrderType">
            <summary>
            Type of the order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.OrderSide">
            <summary>
            Side of the order
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.UserId">
            <summary>
            User id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitUserTrade.Timestamp">
            <summary>
            Trade time
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitWalletFundRecord">
            <summary>
            Wallet fund record
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWalletFundRecord.Id">
            <summary>
            Record id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWalletFundRecord.UserId">
            <summary>
            User id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWalletFundRecord.Asset">
            <summary>
            Asset
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWalletFundRecord.WalletId">
            <summary>
            Wallet id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWalletFundRecord.Type">
            <summary>
            Transfer type
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWalletFundRecord.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWalletFundRecord.TransactionId">
            <summary>
            Transaction id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWalletFundRecord.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWalletFundRecord.WalletBalance">
            <summary>
            Wallet balance
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWalletFundRecord.Timestamp">
            <summary>
            Execution time
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWalletFundRecord.CrossSequence">
            <summary>
            Cross sequence
            </summary>
        </member>
        <member name="T:Bybit.Net.Objects.Models.BybitWithdraw">
            <summary>
            Withdraw info
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWithdraw.Asset">
            <summary>
            Asset 
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWithdraw.Network">
            <summary>
            Network
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWithdraw.Quantity">
            <summary>
            Quantity
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWithdraw.TransactionId">
            <summary>
            Trasaction id
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWithdraw.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWithdraw.ToAddress">
            <summary>
            To address
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWithdraw.Tag">
            <summary>
            Tag
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.Models.BybitWithdraw.WithdrawFee">
            <summary>
            Withdrawal fee
            </summary>
        </member>
        <member name="P:Bybit.Net.Objects.M